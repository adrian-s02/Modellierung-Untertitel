258 # slide
00:00:00,000 --> 00:00:04,770
Let's go back to our wristwatch example.

00:00:04,770 --> 00:00:09,270
As a reminder, it looks like this so far.

00:00:09,270 --> 00:00:16,530
The hour and minute display, or
count, are implemented in parallel regions.

00:00:16,530 --> 00:00:24,240
We had used such a broadcast effect that when
the minute counter here jumps from 59 to 0,

00:00:24,240 --> 00:00:30,270
it triggers an hour effect that
causes the hour count to advance here.

00:00:30,270 --> 00:00:32,970
We had used an effect to say that

00:00:32,970 --> 00:00:39,630
whenever the minute counter goes to
zero, there should be a beep.

00:00:39,630 --> 00:00:46,950
We have the alarm on and off
setting, and we have these transitions between these

00:00:46,950 --> 00:00:51,930
two composite states to get from
the time display to the alarm setting

00:00:51,930 --> 00:00:54,720
and back, and to change between
on and off in the alarm setting.

00:00:58,440 --> 00:00:59,760
Are we done?

00:00:59,760 --> 00:01:00,480
No, there are still problems.

00:01:00,480 --> 00:01:05,820
Namely, one major problem is that
when we return to the time display

00:01:05,820 --> 00:01:08,910
from the alarm setting,
it always jumps to zero.

00:01:08,910 --> 00:01:10,200
Why is that?

00:01:11,340 --> 00:01:13,290
We had discussed last
what the consequences of

00:01:13,290 --> 00:01:15,780
these entry/exit options are.

00:01:15,780 --> 00:01:17,760
And for example, here's what it's like:

00:01:17,760 --> 00:01:20,910
Suppose we are somehow sitting at 2:58,

00:01:22,230 --> 00:01:27,330
so we have state 2 in the hour
count and state 58 in the minute count.

00:01:27,330 --> 00:01:31,470
Then button a is pressed,
so this trigger is fired.

00:01:31,470 --> 00:01:32,700
What does it do?

00:01:32,700 --> 00:01:36,720
We had said we leave the
overall state, that is, we leave both

00:01:36,720 --> 00:01:45,480
regions, we end up here in the
alarm state in the first moment at

00:01:46,350 --> 00:01:51,870
the on sub-state, because that's the start state;
then maybe we turn the alarm on and

00:01:51,870 --> 00:01:55,530
off several times (that's where we would use
b to switch back and forth between these

00:01:55,530 --> 00:01:57,739
two sub-states), then we press a
again, so we trigger the a trigger.

00:01:57,739 --> 00:01:58,245
What would that do?

00:01:58,245 --> 00:02:04,740
We would leave that sub-state, go
back to that more complex region

00:02:04,740 --> 00:02:07,530
state, and we would do
that with the default entry.

00:02:07,530 --> 00:02:10,710
And that means that in each
region, we would choose the initial state.

00:02:10,710 --> 00:02:16,060
Then we end up back at
zero and zero, instead of 2:58.

00:02:16,060 --> 00:02:19,270
That's not intentional, of course, and
that's also true the other way around.

00:02:19,270 --> 00:02:25,480
So whatever was going on last in the
alarm setting, so to speak, is ignored when

00:02:25,480 --> 00:02:29,860
we switch to the time display and back.

00:02:30,400 --> 00:02:32,260
What makes this clear?

00:02:32,770 --> 00:02:39,370
We have a time, we switch with a
to the alarm setting, then that is first On,

00:02:39,370 --> 00:02:47,710
then we press b, are Off, then we press
button a, then we get back into this region state,

00:02:47,710 --> 00:02:52,030
switch there maybe a few times,
press button a again at some point.

00:02:52,030 --> 00:02:52,720
What happens then?

00:02:52,720 --> 00:02:56,470
We leave that right state,
get into the left state, use

00:02:56,470 --> 00:02:59,260
the default entry there, and that says

00:02:59,260 --> 00:03:04,990
we start back at the
start state from that hierarchical state.

00:03:04,990 --> 00:03:08,830
So we're back at On, even though the
last time we were here in the sub-state, we

00:03:08,830 --> 00:03:12,340
were in this left state,
we chose the sub-state Off.

00:03:12,340 --> 00:03:21,490
So these transitions in this
way (as used before) forget what

00:03:21,490 --> 00:03:23,260
was in each of the sub-states.

00:03:23,260 --> 00:03:27,460
This is not surprising because
we are not using the history,

00:03:27,460 --> 00:03:31,030
which was actually introduced precisely for
the purpose of not forgetting such sub-states.

00:03:31,030 --> 00:03:34,690
We have used here in this example
so far only the exit from the

00:03:34,690 --> 00:03:40,810
total state and the
standard entry into composite states.

00:03:42,010 --> 00:03:48,310
And that just doesn't exhaust the possibilities
we have for not forgetting sub-states (i.e., the

00:03:48,310 --> 00:03:55,510
last state in a hierarchical
state or a region state).

00:03:56,260 --> 00:04:01,540
So, the problems were to be expected
because we haven't used history nodes yet.

00:04:01,540 --> 00:04:05,470
And the solution, of course, is
to actually use entries over history.

00:04:05,470 --> 00:04:07,780
In fact, in the
specific example, it doesn't

00:04:07,780 --> 00:04:10,270
even matter if we
use shallow or deep history.

00:04:10,270 --> 00:04:11,110
Why?

00:04:11,110 --> 00:04:15,160
Well, because there are no
deep nesting levels here at all.

00:04:15,160 --> 00:04:22,120
So both the right region state
and the left hierarchical state have

00:04:22,120 --> 00:04:27,880
exactly one more nesting level
and no deeper hierarchical nestings

00:04:27,880 --> 00:04:31,450
where it would make a difference
whether we use deep or shallow history.

00:04:31,450 --> 00:04:34,150
I'll use the shallow
history here in a moment.

00:04:40,420 --> 00:04:46,600
Since we have two regions to go
to when we transition to the right

00:04:46,600 --> 00:04:54,160
region state, we actually need two history
states, one in each of the two regions.

00:04:54,160 --> 00:05:00,280
And the jumping on entering
is then realized by a fork.

00:05:00,280 --> 00:05:02,740
So here from right to left we
can say we're introducing a flat history here

00:05:02,740 --> 00:05:05,980
and this a transition we just
go to the history node here.

00:05:05,980 --> 00:05:09,250
Going from left to right,
yes we want to enter these

00:05:09,250 --> 00:05:13,870
two regions, and in both
regions we want to use that

00:05:13,870 --> 00:05:18,220
we could remember what the
last hour or minute state was.

00:05:18,220 --> 00:05:21,910
Because we have a going
to the right via a

00:05:21,910 --> 00:05:28,120
fork each to history nodes
in the two regions entering.

00:05:32,680 --> 00:05:35,380
And that then looks like this.

00:05:38,460 --> 00:05:40,710
Nothing has changed in
the substates, for example

00:05:41,880 --> 00:05:44,520
this region is as before,
this one is as well.

00:05:44,520 --> 00:05:45,870
These history nodes have been added.

00:05:45,870 --> 00:05:48,180
Flat history, because there
is no star on it.

00:05:48,180 --> 00:05:53,610
The entry to the right happens via
this fork, which then points to the

00:05:53,610 --> 00:05:59,430
two history nodes, and from right to
left we also go via a history node.

00:05:59,430 --> 00:06:06,150
If we compare this picture
with this diagram, we can see

00:06:06,150 --> 00:06:10,170
exactly where the differences are, so
the two right and left total

00:06:10,170 --> 00:06:15,810
states have not changed significantly,
but the transitions are now

00:06:15,810 --> 00:06:19,800
more precisely designed and ensure
that we remember just sub-states.

00:06:19,800 --> 00:06:28,080
Now it would be like, if we say we're
going to be at 2: 58 o'clock in the hour

00:06:28,080 --> 00:06:33,975
display, would then switch to the alarm setting state with
a, that will be the first time we go to

00:06:33,975 --> 00:06:39,690
On because the history node has this arrow on On,
then we can switch me back and forth with b

00:06:39,690 --> 00:06:44,700
several times or not, would then go back
to the region state right with a, but would

00:06:44,700 --> 00:06:47,790
not do that via the default entry,
but would use per this fork these

00:06:48,360 --> 00:06:55,110
history nodes and then it would be the same
when we go back that we don't go to

00:06:55,110 --> 00:06:59,580
zero here because we've been in this region,
this overall state before, namely at 2: 58,

00:06:59,580 --> 00:07:04,140
d. That is, these two history
nodes would ensure that when we return

00:07:04,140 --> 00:07:08,760
to this right complex state, we would be
at 2: 58 and not at 0: 00.

00:07:08,760 --> 00:07:15,330
And vice versa, if we switched here
to Off, then press a to return here

00:07:15,330 --> 00:07:18,720
to the hour and minute
display and then press a

00:07:18,720 --> 00:07:23,070
again and again, then we would not land
at On, but wherever we were last in the

00:07:23,970 --> 00:07:28,440
left hierarchical state and if that was Off,
then we would also land at Off, i.e.

00:07:28,440 --> 00:07:35,850
these two problems mentioned here
would be solved exactly by this.

00:07:35,850 --> 00:07:40,560
As said, here we could have used
in each case also deep history, because

00:07:40,560 --> 00:07:44,610
there is no deeper nesting
at all on the one hand.

00:07:44,610 --> 00:07:48,360
On the other hand, we
would not have needed to

00:07:48,360 --> 00:07:52,440
draw the arrows that
start from history nodes.

00:07:52,440 --> 00:07:59,460
These three arrows are only used if we have
never been in the respective state in the respective

00:07:59,460 --> 00:08:05,850
region or nesting level, if such
a history node has no direct outgoing

00:08:05,850 --> 00:08:11,460
arrow, then in each case simply the corresponding
start node from the respective region or nesting

00:08:11,460 --> 00:08:15,240
level is taken and since it is
in each case in such a way that

00:08:15,240 --> 00:08:17,910
the history nodes always
point anyway to the sub-state,

00:08:17,910 --> 00:08:25,770
which is also marked by the
start state in the corresponding place,

00:08:25,770 --> 00:08:31,230
the omission of these three
arrows would make no difference.

00:08:32,670 --> 00:08:38,820
Especially if, when we first enter a
state via history nodes, we want to go

00:08:38,820 --> 00:08:45,270
to a different state than the
start state of that level would

00:08:45,270 --> 00:08:49,401
be if we came via
standard entry rather than history.

00:08:49,401 --> 00:08:55,200
Those are a couple of variations
that we could have omitted those

00:08:55,200 --> 00:08:58,680
three arrows and that we could have
taken deep history instead of shallow history.

00:08:58,680 --> 00:09:08,280
So are we done with that, having
gotten from this case to this diagram?

00:09:08,280 --> 00:09:10,410
No, there's still something missing.

00:09:10,410 --> 00:09:12,450
What is still missing?

00:09:12,450 --> 00:09:20,280
Well, what hasn't been realized yet is
that this alarm setting really has something

00:09:20,280 --> 00:09:24,090
to do with whether or not there is
a click, a transition to a full hour.

00:09:24,630 --> 00:09:28,920
Here there is this effect, if
we jump to the 0th minute,

00:09:28,920 --> 00:09:32,430
that is to a full hour,
then a signal is triggered here.

00:09:32,430 --> 00:09:37,860
Actually, the clock should only trigger the
signal when the alarm is actually set,

00:09:37,860 --> 00:09:43,050
but there is no connection or
no communication between the fact, is the

00:09:43,050 --> 00:09:48,510
alarm on or off on the one hand,
and the fact, is beeped here or not.

00:09:52,290 --> 00:09:55,410
So we have to transport some more

00:09:55,410 --> 00:09:57,300
information and we can
do that via a flag.

00:09:57,300 --> 00:09:59,610
This is like a
variable in a programming language,

00:10:00,270 --> 00:10:04,890
a variable in which we can
store values, for example a Boolean variable,

00:10:04,890 --> 00:10:10,500
which we can switch on and
off, true and false, zero and one.

00:10:11,040 --> 00:10:15,000
We will call this AL for
alarm and use it to get this

00:10:15,000 --> 00:10:24,720
beep effect, this signal tone under control, i.e.
on the one hand, we should take that into

00:10:24,720 --> 00:10:28,020
account when triggering this beep, whether the
alarm is on or not, so we

00:10:28,020 --> 00:10:34,140
should check this flag whether it is
on or off on the one hand.

00:10:34,140 --> 00:10:37,200
On the other hand, of course, we
have to make sure that it's also set

00:10:37,200 --> 00:10:42,450
to on and off at some point,
that is, during these transitions between these

00:10:42,450 --> 00:10:47,250
states here of the alarm setting, we
should do something with this alarm flag.

00:10:50,100 --> 00:10:57,150
We'll see how that happens in a
moment, what that looks like then, but

00:10:57,150 --> 00:11:04,200
the basic idea is, we'll set this
alarm flag, use that when the beep is

00:11:04,200 --> 00:11:08,850
triggered to check if that should be, and
set it when it's turned on and off.

00:11:11,280 --> 00:11:19,830
Furthermore, by means of this alarm flag, we
will actually also avoid using the flat history

00:11:19,830 --> 00:11:25,740
in the alarm setting
sub-state, in the left part.

00:11:25,740 --> 00:11:33,180
So if we're going to introduce a flag anyway that
we can look at whether the alarm is on or off,

00:11:33,180 --> 00:11:37,290
then we don't need this history node at
all, because we can just as easily just read

00:11:37,290 --> 00:11:42,900
this flag decisively at the entry here, whether we
want to go to this state or that state.

00:11:49,560 --> 00:11:52,260
What does that look like then?

00:11:54,690 --> 00:11:57,210
With that, we move on to this diagram.

00:11:57,210 --> 00:11:59,880
We can compare that again
with what we have so far.

00:11:59,880 --> 00:12:01,110
What changes there?

00:12:01,110 --> 00:12:08,970
So again the main parts, here the
regions don't change or here this inner structure

00:12:08,970 --> 00:12:13,890
of this left hierarchical
state, but especially here at

00:12:13,890 --> 00:12:22,890
the transitions we do something, namely here instead
of using the history from right to left

00:12:22,890 --> 00:12:28,500
we simply make that dependent on these flags
whether we go to the on or off state.

00:12:28,500 --> 00:12:30,960
We're allowed to do that by
writing another condition to this trigger.

00:12:30,960 --> 00:12:36,540
If you look in the previous slides, you
can see that this is a possible description,

00:12:36,540 --> 00:12:39,240
that we have a trigger and another possible
condition and that would be this query again

00:12:39,240 --> 00:12:42,870
of this alarm flag, that
has to be set somewhere.

00:12:42,870 --> 00:12:43,680
That's what's happening here.

00:12:44,640 --> 00:12:49,440
In switching between two sub-states,
we may also trigger an effect.

00:12:49,440 --> 00:12:51,720
So an effect can be
to switch this alarm flag.

00:12:51,720 --> 00:12:55,260
So if we switch to Off with the
b button, we set Alarm to zero and

00:12:55,260 --> 00:12:57,540
if we switch to On, we set Alarm to one.

00:12:57,540 --> 00:13:02,640
We take advantage of that when we enter
this left setting state by making that dependent

00:13:02,640 --> 00:13:07,560
on the alarm flag, whether we want to go
this way or that way and very importantly of course:

00:13:08,380 --> 00:13:13,660
We also use the alarm flag here
to trigger that beep, that signal only

00:13:13,660 --> 00:13:17,890
when we enter the zero state and
the alarm flag is currently set to one.

00:13:22,750 --> 00:13:27,760
Those are differences between
this chart and that chart.

00:13:33,190 --> 00:13:34,870
Is that it then?

00:13:34,870 --> 00:13:42,640
Well we still need to somehow determine how
the alarm flag is set at the beginning.

00:13:42,640 --> 00:13:46,360
At some point in the
beginning, this overall chart is entered.

00:13:46,360 --> 00:13:51,760
We know we start in the hours minutes
display because the start node points to it here.

00:13:51,760 --> 00:13:58,150
We choose the default entry for this, which
is the start state for hour minutes 0:00,

00:13:58,150 --> 00:14:01,540
but is the alarm flag set on this or not?

00:14:01,540 --> 00:14:02,740
That still needs to be clarified.

00:14:06,970 --> 00:14:13,090
We will do that in a moment
and in the course of that we will

00:14:13,090 --> 00:14:18,790
also model the third aspect
right away, that the clock has

00:14:18,790 --> 00:14:26,980
a battery that can get empty and when
the battery gets empty, you should replace it.

00:14:26,980 --> 00:14:30,550
But in doing so, the hours and
minutes are to be reset to zero.

00:14:30,550 --> 00:14:33,250
The clock then starts running again
at zero and the alarm flag,

00:14:33,250 --> 00:14:34,712
the alarm should always
be on at the beginning.

00:14:34,712 --> 00:14:40,390
This is the place where we also set
whether the alarm is originally on or not.

00:14:40,390 --> 00:14:46,600
So we're modeling that the clock
has a battery that can go dead,

00:14:46,600 --> 00:14:52,330
needs to be changed, and in that
case something happens to the state, namely

00:14:52,330 --> 00:14:58,720
we want, if the battery was
dead, then we don't want to enter

00:14:58,720 --> 00:15:06,940
the states, for example, through the
history, but at 0:00, one aspect.

00:15:06,940 --> 00:15:07,570
The other aspect:

00:15:07,570 --> 00:15:16,660
We want that then the alarm flag is set
to one, that is, if you put a new

00:15:16,660 --> 00:15:24,610
battery in the clock and also at the
beginning simply the alarm state is always one.

00:15:28,900 --> 00:15:32,590
And that could then achieve so:

00:15:32,590 --> 00:15:37,720
So we pack everything that
we have so far in terms

00:15:37,720 --> 00:15:43,270
of state diagram, that was this
part, we pack that again into a

00:15:43,270 --> 00:15:47,350
hierarchical state, namely how the clock
behaves when the batteries are not empty.

00:15:47,350 --> 00:15:53,650
Everything that is here is developed exactly as
before and then we have not parallel to that

00:15:54,940 --> 00:15:57,910
but independent of that another state
that is there for when the

00:15:57,910 --> 00:16:02,140
battery is empty and when the watch
is delivered the battery compartment is empty

00:16:02,140 --> 00:16:09,190
and the battery is empty, that is here
is the extreme beginning of the whole processing.

00:16:09,190 --> 00:16:16,210
When a battery is inserted, then on the one
hand we come into this part here and we know

00:16:16,210 --> 00:16:20,710
that we then start at this
start state, so we start over the

00:16:20,710 --> 00:16:26,170
default entry here at zero and zero and we
set the alarm flag to one in the process.

00:16:26,170 --> 00:16:32,830
Then what happens is whatever
the previous behavior was, so

00:16:32,830 --> 00:16:37,030
time progresses, we can change
the alarm setting, we can

00:16:37,030 --> 00:16:41,020
turn on and off in the process so
it beeps right when the alarm is on.

00:16:41,020 --> 00:16:44,170
When we switch back to
the alarm setting, the flag is

00:16:44,170 --> 00:16:47,095
used to check whether the alarm
is on or not, and so on.

00:16:47,095 --> 00:16:49,780
Then the battery can always run out.

00:16:49,780 --> 00:16:53,650
This causes us to end
up in this state again:

00:16:53,650 --> 00:16:55,060
Battery is empty.

00:16:55,060 --> 00:16:57,520
We can only leave this
state by inserting a new battery.

00:16:57,520 --> 00:16:58,630
What happens in the process?

00:16:59,440 --> 00:17:02,020
Then we end up at 0:00 again, as

00:17:02,020 --> 00:17:07,000
we would expect after losing the
battery and inserting a new one.

00:17:07,000 --> 00:17:12,220
We end up at 0:00 because we
don't use the history node, we use

00:17:12,220 --> 00:17:18,760
the default entry,
the two sub-start states

00:17:18,760 --> 00:17:25,525
0 and 0, and we also always set the alarm
flag to one when we insert a battery, which means

00:17:25,525 --> 00:17:31,060
that if we then pressed a for the first
time, we would always end up in that sub-state.

00:17:35,440 --> 00:17:41,380
And that's supposed to be our
final modeling for this wristwatch now.

00:17:41,380 --> 00:17:46,450
And that's where most of
the elements that we introduced

00:17:46,450 --> 00:17:48,670
earlier for UML state diagrams occur.

00:17:48,670 --> 00:17:52,480
There are many more, but they
should not be the topic here.
