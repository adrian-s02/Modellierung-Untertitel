264 # slide
00:00:00,000 --> 00:00:08,820
At the beginning, I motivated that
we look at these UML state diagrams.

00:00:08,820 --> 00:00:12,390
And that many of the features that
they support are primarily intended for noting

00:00:12,390 --> 00:00:16,020
diagrams compactly and clearly, i.e.,

00:00:16,020 --> 00:00:22,170
not having to specify flat
state diagrams with very many states.

00:00:23,280 --> 00:00:25,860
This compactness also has a counterpart.

00:00:25,860 --> 00:00:30,090
Namely, you can also turn such
a compact UML state diagram back into

00:00:30,090 --> 00:00:32,550
a flat state diagram by tapping it flat.

00:00:33,570 --> 00:00:38,880
Finally, I want to look at
that here, in three videos with examples.

00:00:41,280 --> 00:00:44,580
You can take a UML state diagram and

00:00:44,580 --> 00:00:49,860
flat-knock that, resolving the composite
states (whether hierarchical or formed by

00:00:49,860 --> 00:00:55,080
regions), and thereby get
equivalent flat state diagrams,

00:00:55,080 --> 00:00:58,230
state diagrams that don't
use all these features.

00:00:58,230 --> 00:01:02,880
Equivalent in the sense that
the semantics are the same,

00:01:02,880 --> 00:01:04,830
that they allow the same transitions.

00:01:04,830 --> 00:01:09,360
So that basically you could have also
worked with this flat state diagram, but

00:01:09,360 --> 00:01:15,240
you don't want to because then you
lose all these advantages of the compact representation.

00:01:15,240 --> 00:01:20,040
Because in general, this flat
state diagram will just contain

00:01:20,040 --> 00:01:22,770
a lot more states and/or transitions.

00:01:22,770 --> 00:01:29,400
This corresponds a bit to the transition
from Petri nets to their reachability graphs.

00:01:29,970 --> 00:01:33,780
Where also the reachability graph to a
Petri net can be much larger, because

00:01:33,780 --> 00:01:38,400
the Petri net is a
special compact way to represent behavior.

00:01:38,400 --> 00:01:41,930
And you can look at
this in a similar way.

00:01:41,930 --> 00:01:46,735
I'm not going to do this formally.

00:01:46,735 --> 00:01:51,850
We're just going to look at three
examples and use those to explain the

00:01:51,850 --> 00:01:56,410
strategies that you should then be able to
apply to other examples, with the same features.

00:01:56,410 --> 00:01:59,500
We're not going to look
at all the features of UML

00:01:59,500 --> 00:02:02,530
state diagrams, nor all the ones
we've seen, or combinations of them.

00:02:02,530 --> 00:02:04,030
Very deliberately.

00:02:04,030 --> 00:02:09,010
And of course, then for exercises and later
for the exam, you only need to be

00:02:09,010 --> 00:02:14,320
able to apply yourself what occurs
here in the examples as well.

00:02:17,590 --> 00:02:18,880
Let's do this concretely for an example.

00:02:18,880 --> 00:02:22,720
Here is a UML state
diagram, obviously not a flat

00:02:22,720 --> 00:02:25,900
state diagram because it
uses such a hierarchical state.

00:02:25,900 --> 00:02:31,270
What makes this example stand out, what's
still sort of fairly simple here compared to

00:02:31,270 --> 00:02:37,360
what UML state diagrams might be overall,
is that no regions show up here.

00:02:37,360 --> 00:02:40,870
So no region state, just
actually such a hierarchical state.

00:02:40,870 --> 00:02:43,990
And there is also no
history used in this example.

00:02:43,990 --> 00:02:45,460
In other examples in a
moment, it will be different.

00:02:47,590 --> 00:02:49,150
What would be the strategy here?

00:02:49,150 --> 00:02:51,550
How can we make
this a flat state diagram?

00:02:51,550 --> 00:02:54,310
Well, obviously we need
to remove this hierarchy.

00:02:56,470 --> 00:02:58,360
We could say we just keep
the simple states A, B, C, D.

00:02:58,360 --> 00:03:02,020
But of course that can't be it
yet, then we would somehow ignore or

00:03:02,020 --> 00:03:08,140
lose in particular these entries and
exits to such a hierarchical state.

00:03:08,140 --> 00:03:13,630
The basic idea will be to keep
the simple states (A, B, C, D will

00:03:13,630 --> 00:03:18,850
just still show up in the
flat state space); these entries and exits

00:03:18,850 --> 00:03:21,580
at the edge of such a
hierarchical state, those have to be translated.

00:03:21,580 --> 00:03:24,040
So we just need to
know what that means, to

00:03:24,040 --> 00:03:27,876
exit from such an
overall state with trigger E.

00:03:27,876 --> 00:03:30,850
That means (we know that if
we would go back to the

00:03:30,850 --> 00:03:36,280
corresponding slides) that we could come from C
as well as from D to A with E.

00:03:36,280 --> 00:03:43,630
That is, this one transition here (in
the UML state diagram) must then become

00:03:43,630 --> 00:03:45,640
two transitions in
the flat state diagram.

00:03:45,640 --> 00:03:47,080
Namely one from C and one from D.

00:03:47,080 --> 00:03:52,540
So that's where we put in what we
know about the exits and also about the entries.

00:03:52,540 --> 00:03:55,990
So also the entry of
A to this complex state.

00:03:55,990 --> 00:03:58,490
Then we need to know, what
does such a standard entry mean?

00:03:58,490 --> 00:04:02,000
That means that we would
take the starting state here.

00:04:02,000 --> 00:04:06,830
I.e., it becomes directly a connection from
A to C in the flat state diagram.

00:04:06,830 --> 00:04:10,280
There we will translate
what then these entries and

00:04:10,280 --> 00:04:13,250
exits at the edge of
such a hierarchical state mean.

00:04:15,380 --> 00:04:18,110
Transitions that have nothing
to do with this

00:04:18,110 --> 00:04:21,260
hierarchy at all and that are
simply between simple sub-states, those are kept.

00:04:21,260 --> 00:04:24,260
So that we can go from A to B with f.

00:04:24,260 --> 00:04:28,640
That's in the UML state diagram
and there are no hierarchies involved somehow.

00:04:28,640 --> 00:04:34,340
That is, since we've kept these simple states A,
B, C, D, we can just keep transitions like

00:04:34,340 --> 00:04:41,570
that that don't somehow involve
the edge of a hierarchical state.

00:04:43,670 --> 00:04:48,530
Then we'd have everything covered except
for how to deal with start states.

00:04:49,490 --> 00:04:53,600
What will be the starting state
of an associated flat state diagram?

00:04:53,600 --> 00:04:54,830
And it can only have one.

00:04:54,830 --> 00:04:58,760
Unlike in the UML state diagram, where
there can be multiple starting states (namely in

00:04:58,760 --> 00:05:03,470
different regions or different nesting levels), in
the flat one there can only be one.

00:05:03,470 --> 00:05:04,880
And that, of course,
will be the outermost one.

00:05:06,050 --> 00:05:09,500
Because this is the outermost start
state in the UML state diagram,

00:05:09,500 --> 00:05:13,070
it also remains as the start
state in the flat state diagram.

00:05:13,070 --> 00:05:18,530
However, this start state in this inner
nesting level, for example, will no longer

00:05:18,530 --> 00:05:20,180
appear in the flat state diagram.

00:05:20,180 --> 00:05:24,620
It might be relevant for the translation
(i.e. the information that we would actually go

00:05:24,620 --> 00:05:29,660
to C with this transition, which is a
standard entry, because this is the start state).

00:05:29,660 --> 00:05:32,120
This information is used
in creating the start state.

00:05:32,120 --> 00:05:37,550
But that node itself doesn't have to
show up in the flat state diagram then.

00:05:42,060 --> 00:05:43,346
What happens?

00:05:43,346 --> 00:05:44,550
What would be the statement?

00:05:44,550 --> 00:05:50,220
The statement was, keep the simple states
(that's why we keep A, B, C,

00:05:50,220 --> 00:05:54,450
D), translate the entries and exits
(we'll do that in a moment),

00:05:54,450 --> 00:06:02,130
keep other transitions
between these states simple.

00:06:02,130 --> 00:06:02,790
We can do that already.

00:06:02,790 --> 00:06:09,420
We'll keep, so to speak, the entrances
that on the one hand satisfy or

00:06:09,420 --> 00:06:12,330
correspond to this starting state
here, the outermost starting state, but

00:06:12,330 --> 00:06:17,280
also in particular those transitions that are not
somehow on the edge of such a hierarchical state.

00:06:17,280 --> 00:06:19,950
So this one is kept, this
one is kept, these two are kept.

00:06:19,950 --> 00:06:22,410
That explains why
we have these transitions.

00:06:23,370 --> 00:06:28,110
And then we just have to translate the
transitions that have something to do with the

00:06:28,110 --> 00:06:32,790
edge of a hierarchical state,
so this e-transition and this a-transition.

00:06:33,630 --> 00:06:34,770
What is the respective translation there?

00:06:34,770 --> 00:06:39,030
For the a-transition we know:

00:06:39,030 --> 00:06:42,390
That was a standard entry
into this complex right state.

00:06:42,390 --> 00:06:48,990
And we know that we just continue there
at the starting state from the inner level.

00:06:48,990 --> 00:06:53,586
That was exactly the
connection that was there.

00:06:53,586 --> 00:06:54,990
Then afterwards we can
also remove that marking

00:06:54,990 --> 00:06:57,000
because it wasn't on the outermost level.

00:06:57,000 --> 00:06:59,910
So it doesn't remain in the flat
state diagram, but it should be used

00:06:59,910 --> 00:07:03,570
to determine where we go from A with a.

00:07:05,850 --> 00:07:08,100
That's the translation of this part.

00:07:09,750 --> 00:07:10,680
And then we still have to take care of e.

00:07:10,680 --> 00:07:16,440
That's this transition that, yes, goes from
the edge of this complex state to A.

00:07:20,430 --> 00:07:24,460
So those are these two transitions
that we have to translate exactly

00:07:24,460 --> 00:07:29,800
so that you can get from C as
well as from D to this left state, A.

00:07:34,240 --> 00:07:37,390
And then we would
have that completely translated.

00:07:37,390 --> 00:07:42,580
This UML state diagram
becomes this flat state diagram

00:07:42,580 --> 00:07:44,620
where there are no more hierarchies.

00:07:44,620 --> 00:07:46,870
It's just a normal flat state diagram.

00:07:46,870 --> 00:07:57,250
And the main step in the
concrete case here was to replace this

00:07:57,250 --> 00:07:59,650
one transition that led away from the

00:07:59,650 --> 00:08:02,740
hierarchical state with several transitions
that start from the states.

00:08:02,740 --> 00:08:07,270
That was the translation of this
one concrete transition from the edge.

00:08:07,270 --> 00:08:09,130
We did something with that one, too.

00:08:09,130 --> 00:08:11,050
Namely, that was a transition that

00:08:11,050 --> 00:08:15,760
led to the default entry and
then led to C in the continuation.

00:08:16,270 --> 00:08:19,870
We used that here as well.

00:08:19,870 --> 00:08:25,810
The basic strategy is to translate
all these entries and exits at

00:08:25,810 --> 00:08:29,950
the edge of hierarchical states
appropriately, and keep the rest essentially.

00:08:29,950 --> 00:08:30,760
As it stands here.

00:08:30,760 --> 00:08:34,270
This is the simplest case, because
it was also the first example.
