258 # slide
00:00:00,000 --> 00:00:04,770
Kehren wir noch einmal zu unserem
Armbanduhr-Beispiel zurück.

00:00:04,770 --> 00:00:09,270
Zur Erinnerung, das sieht bis jetzt so aus.

00:00:09,270 --> 00:00:16,530
Es werden die Stunden- und Minutenzählung
in parallelen Regionen realisiert.

00:00:16,530 --> 00:00:24,240
Wir hatten so einen Broadcast-Effekt genutzt, dass
wenn der Minutenzähler hier von 59 auf 0 springt,

00:00:24,240 --> 00:00:30,270
ein Stunden-Effekt ausgelöst wird, der hier
einen Fortschritt bei der Stundenzählung bewirkt.

00:00:30,270 --> 00:00:32,970
Wir hatten einen Effekt benutzt, um zu sagen,

00:00:32,970 --> 00:00:39,630
dass immer wenn der Minutenzähler auf
null geht, ein Signalton erscheinen soll.

00:00:39,630 --> 00:00:46,950
Wir haben die Alarm-An- und Aus-Stellung,
und wir haben diese Übergänge zwischen diesen

00:00:46,950 --> 00:00:51,930
beiden zusammengesetzten Zuständen, um aus der
Zeitanzeige in die Alarmeinstellung und zurück

00:00:51,930 --> 00:00:54,720
zu geraten, und in der Alarmeinstellung
zwischen Ein und Aus zu wechseln.

00:00:58,440 --> 00:00:59,760
Sind wir fertig?

00:00:59,760 --> 00:01:00,480
Nein, es gibt noch Probleme.

00:01:00,480 --> 00:01:05,820
Und zwar ist ein wesentliches Problem,
dass wenn wir aus der Alarmeinstellung

00:01:05,820 --> 00:01:08,910
zur Zeitanzeige zurückkehren,
diese immer auf null springt.

00:01:08,910 --> 00:01:10,200
Wieso ist das so?

00:01:11,340 --> 00:01:13,290
Wir hatten ja zuletzt diskutiert, was denn diese

00:01:13,290 --> 00:01:15,780
Ein- und Austrittsmöglichkeiten
für Konsequenzen haben.

00:01:15,780 --> 00:01:17,760
Und zum Beispiel ist es hier so:

00:01:17,760 --> 00:01:20,910
Angenommen, wir stehen irgendwie bei 2:58 Uhr,

00:01:22,230 --> 00:01:27,330
also wir haben in der Stundenzählung den Zustand
2 und in der Minutenzählung den Zustand 58.

00:01:27,330 --> 00:01:31,470
Danach wird der Knopf a gedrückt,
also dieser Trigger ausgelöst.

00:01:31,470 --> 00:01:32,700
Was bewirkt der?

00:01:32,700 --> 00:01:36,720
Wir hatten gesagt, wir verlassen den
Gesamtzustand, das heißt, wir verlassen alle

00:01:36,720 --> 00:01:45,480
beiden Regionen, landen hier im Alarmzustand
im ersten Moment bei dem An-Unterzustand,

00:01:46,350 --> 00:01:51,870
weil das der Startzustand ist; dann schalten
wir vielleicht mehrmals den Alarm an und

00:01:51,870 --> 00:01:55,530
aus (da würden wir mit b zwischen diesen
beiden Unterzuständen hin und her wechseln),

00:01:55,530 --> 00:01:57,739
dann drücken wir wieder a,
lösen also den Trigger a aus.

00:01:57,739 --> 00:01:58,245
Was würde das bewirken?

00:01:58,245 --> 00:02:04,740
Wir würden diesen Unterzustand verlassen,
wieder in diesen komplexeren Regionenzustand

00:02:04,740 --> 00:02:07,530
zurückkehren, und wir würden das
mit dem Standardeintritt machen.

00:02:07,530 --> 00:02:10,710
Und das heißt, dass wir in jeder
Region den Startzustand wählen.

00:02:10,710 --> 00:02:16,060
Dann landen wir wieder bei null
und null, statt bei 2:58 Uhr.

00:02:16,060 --> 00:02:19,270
Das ist natürlich nicht gewollt.
Und das gilt auch umgekehrt.

00:02:19,270 --> 00:02:25,480
Also, was auch immer in der Alarmeinstellung
zuletzt sozusagen los war, wird ignoriert,

00:02:25,480 --> 00:02:29,860
wenn wir zur Zeitanzeige und zurück wechseln.

00:02:30,400 --> 00:02:32,260
Woran wird das deutlich?

00:02:32,770 --> 00:02:39,370
Wir haben eine Uhrzeit, wir wechseln mit a zur
Alarmeinstellung, dann ist das erst mal On,

00:02:39,370 --> 00:02:47,710
dann drücken wir b, sind Off, dann drücken
wir Knopf a, dann geraten wir wieder in diesen

00:02:47,710 --> 00:02:52,030
Regionenzustand, schalten da vielleicht ein
paar mal, drücken irgendwann wieder Knopf a.

00:02:52,030 --> 00:02:52,720
Was passiert dann?

00:02:52,720 --> 00:02:56,470
Wir verlassen diesen rechten Zustand,
geraten in den linken Zustand,

00:02:56,470 --> 00:02:59,260
nutzen dort den Standardeintritt, und der besagt,

00:02:59,260 --> 00:03:04,990
dass wir wieder beim Startzustand von
diesem hierarchischen Zustand beginnen.

00:03:04,990 --> 00:03:08,830
Also sind wir wieder bei On, obwohl wir das letzte
Mal, als wir

00:03:08,830 --> 00:03:12,340
in diesem linken Zustand waren,
den Unterzustand Off gewählt haben.

00:03:12,340 --> 00:03:21,490
Also diese Übergänge auf diese Art
(wie bisher verwendet) vergessen,

00:03:21,490 --> 00:03:23,260
was jeweils in den Unterzuständen war.

00:03:23,260 --> 00:03:27,460
Das ist nicht überraschend, weil
wir die Historie nicht verwenden,

00:03:27,460 --> 00:03:31,030
die eigentlich genau dafür eingeführt wurde,
solche Unterzustände nicht zu vergessen.

00:03:31,030 --> 00:03:34,690
Wir haben hier in diesem Beispiel
bis jetzt nur den Austritt aus dem

00:03:34,690 --> 00:03:40,810
Gesamtzustand und den Standardeintritt
in zusammengesetzte Zustände verwendet.

00:03:42,010 --> 00:03:48,310
Und das schöpft eben nicht die Möglichkeiten aus,
die wir haben, um Unterzustände nicht zu vergessen

00:03:48,310 --> 00:03:55,510
(also den letzten Zustand in einem hierarchischen
Zustand oder einem Regionenzustand).

00:03:56,260 --> 00:04:01,540
Also, die Probleme waren zu erwarten, weil
wir noch keine Historienknoten benutzt haben.

00:04:01,540 --> 00:04:05,470
Und die Lösung ist natürlich, tatsächlich
Eintritte über Historie zu verwenden.

00:04:05,470 --> 00:04:07,780
Tatsächlich ist es in dem
konkreten Beispiel auch egal,

00:04:07,780 --> 00:04:10,270
ob wir die flache oder die
tiefe Historie verwenden.

00:04:10,270 --> 00:04:11,110
Warum?

00:04:11,110 --> 00:04:15,160
Nun, weil hier gar keine tieferen
Schachtelungsebenen existieren.

00:04:15,160 --> 00:04:22,120
Also sowohl der rechte Regionenzustand als
auch der linke hierarchische Zustand haben

00:04:22,120 --> 00:04:27,880
genau noch eine Schachtelungsebene und keine
tieferen weiteren hierarchischen Schachtelungen,

00:04:27,880 --> 00:04:31,450
wo es einen Unterschied machen würde, ob
wir tiefe oder flache Historie verwenden.

00:04:31,450 --> 00:04:34,150
Ich werde hier gleich die
flache Historie verwenden.

00:04:40,420 --> 00:04:46,600
Da wir beim Übergang in den rechten
Regionenzustand zwei Regionen anzusteuern haben,

00:04:46,600 --> 00:04:54,160
brauchen wir tatsächlich zwei Historienzustände,
nämlich je einen in jeder der beiden Regionen.

00:04:54,160 --> 00:05:00,280
Und das Anspringen beim Eintreten wird
dann über eine Gabelung realisiert.

00:05:00,280 --> 00:05:02,740
Also hier von rechts nach links können
wir sagen, wir führen hier eine flache

00:05:02,740 --> 00:05:05,980
Historie ein und diesen a-Übergang gehen
wir eben zu dem Historienknoten hier.

00:05:05,980 --> 00:05:09,250
Wenn wir von links nach rechts
gehen, dann wollen wir ja in

00:05:09,250 --> 00:05:13,870
diese beiden Regionen eintreten, und in
beiden Regionen wollen wir verwenden,

00:05:13,870 --> 00:05:18,220
dass wir uns merken konnten, was der
letzte Stunden- bzw. Minutenzustand war.

00:05:18,220 --> 00:05:21,910
Denn wir haben a nach rechts gehend über eine

00:05:21,910 --> 00:05:28,120
Gabelung jeweils zu Historienknoten
in den beiden Regionen eintretend.

00:05:32,680 --> 00:05:35,380
Und das sieht dann so aus.

00:05:38,460 --> 00:05:40,710
In den Unterzuständen hat sich nichts geändert,

00:05:41,880 --> 00:05:44,520
zum Beispiel diese Region
ist wie vorher, diese auch.

00:05:44,520 --> 00:05:45,870
Es sind diese Historienknoten hinzugekommen.

00:05:45,870 --> 00:05:48,180
Flache Historie, weil da kein Stern dransteht.

00:05:48,180 --> 00:05:53,610
Der Eintritt nach rechts geschieht über
diese Gabelung, die dann auf die beiden

00:05:53,610 --> 00:05:59,430
Historienknoten verweist, und von rechts nach
links gehen wir auch über einen Historienknoten.

00:05:59,430 --> 00:06:06,150
Wenn wir dieses Bild mit
diesem Diagramm vergleichen, sehen wir genau,

00:06:06,150 --> 00:06:10,170
wo die Unterschiede sind. Also die beiden
rechten und linken Gesamtzustände haben

00:06:10,170 --> 00:06:15,810
sich nicht wesentlich verändert, aber
die Übertritte sind jetzt präziser

00:06:15,810 --> 00:06:19,800
gestaltet und sorgen dafür, dass
wir uns eben Unterzustände merken.

00:06:19,800 --> 00:06:28,080
Jetzt wäre es so, wenn wir sagen, wir wären
bei 2:58 Uhr in der Zeitanzeige, würden dann

00:06:28,080 --> 00:06:33,975
mit a in den Alarm-Einstellungszustand wechseln
(es wird beim ersten Mal so sein, dass wir zu On

00:06:33,975 --> 00:06:39,690
gehen, weil der Historienknoten diesen Pfeil auf
On hat), dann können wir mit b mehrmals hin-

00:06:39,690 --> 00:06:44,700
und herschalten oder auch nicht, würden dann mit
a wieder in den Regionenzustand rechts gehen,

00:06:44,700 --> 00:06:47,790
würden das aber nicht über den Standardeintritt
machen, sondern per dieser Gabelung diese

00:06:48,360 --> 00:06:55,110
Historienknoten verwenden, und dann wäre es eben so,
wenn wir zurückkehren, dass wir nicht hier zu null

00:06:55,110 --> 00:06:59,580
gehen, weil wir schon mal in dieser Region,
diesem Gesamtzustand waren, nämlich bei 2:58.

00:06:59,580 --> 00:07:04,140
Das heißt, diese beiden Historienknoten würden
dafür sorgen, dass wir bei der Rückkehr in

00:07:04,140 --> 00:07:08,760
diesen rechten komplexen Zustand bei
2:58 Uhr wären und nicht bei 0:00 Uhr.

00:07:08,760 --> 00:07:15,330
Und genauso umgekehrt, wenn wir hier geschaltet
haben auf Off, dann mit a hierher zurückkehren

00:07:15,330 --> 00:07:18,720
in die Stunden- und Minutenanzeige
und dann wieder a drücken.

00:07:18,720 --> 00:07:23,070
Dann würden wir nämlich nicht bei On landen,
sondern da, wo auch immer wir in dem linken

00:07:23,970 --> 00:07:28,440
hierarchischen Zustand zuletzt waren. Und wenn
das Off war, dann würden wir auch bei Off landen.

00:07:28,440 --> 00:07:35,850
Das heißt, diese beiden hier genannten
Probleme würden genau dadurch gelöst.

00:07:35,850 --> 00:07:40,560
Wie gesagt, hier hätten wir einerseits jeweils
auch tiefe Historie verwenden können,

00:07:40,560 --> 00:07:44,610
weil es gar keine tiefergehenden
Schachtelungen gibt.

00:07:44,610 --> 00:07:48,360
Andererseits hätten wir hier
jeweils die Pfeile,

00:07:48,360 --> 00:07:52,440
die von Historienknoten ausgehen,
eigentlich nicht einzeichnen brauchen.

00:07:52,440 --> 00:07:59,460
Diese drei Pfeile, die werden ja nur verwendet,
falls wir noch nie in dem jeweiligen Zustand in

00:07:59,460 --> 00:08:05,850
der jeweiligen Region oder Schachtelungsebene
waren. Wenn so ein Historienknoten gar keinen

00:08:05,850 --> 00:08:11,460
direkt ausgehenden Pfeil hat, dann wird in jedem
Fall einfach der entsprechende Startknoten aus

00:08:11,460 --> 00:08:15,240
der jeweiligen Region oder Schachtelungsebene
genommen. Und da es hier jeweils genau so ist,

00:08:15,240 --> 00:08:17,910
dass die Historienknoten sowieso
immer auf den Unterzustand zeigen,

00:08:17,910 --> 00:08:25,770
der auch durch den Startzustand in der
entsprechenden Stelle gekennzeichnet ist,

00:08:25,770 --> 00:08:31,230
würde das Weglassen dieser drei
Pfeile keinen Unterschied machen.

00:08:32,670 --> 00:08:38,820
Solche Pfeile brauchen wir vor allem dann, wenn wir beim erstmaligen
Eintritt in einen Zustand per Historienknoten

00:08:38,820 --> 00:08:45,270
einen anderen Zustand ansteuern wollen
als der Startzustand dieser Ebene wäre,

00:08:45,270 --> 00:08:49,401
wenn wir nicht über Historie,
sondern über Standardeintritt kommen.

00:08:49,401 --> 00:08:55,200
Das sind ein paar Varianten, dass wir
diese drei Pfeile hätten weglassen

00:08:55,200 --> 00:08:58,680
können und dass wir statt der flachen auch
die tiefe Historie hätten nehmen können.

00:08:58,680 --> 00:09:08,280
Sind wir damit fertig, nachdem wir also von
diesem Fall zu diesem Diagramm gekommen sind?

00:09:08,280 --> 00:09:10,410
Nein, es fehlt immer noch etwas.

00:09:10,410 --> 00:09:12,450
Was fehlt denn noch?

00:09:12,450 --> 00:09:20,280
Nun, was bisher noch gar nicht realisiert ist,
ist, dass diese Alarmeinstellung wirklich etwas

00:09:20,280 --> 00:09:24,090
damit zu tun hat, ob denn nun gepiept wird
oder nicht, beim Übergang zu einer vollen Stunde.

00:09:24,630 --> 00:09:28,920
Hier gibt es diesen Effekt: wenn
wir zur 0ten Minute springen,

00:09:28,920 --> 00:09:32,430
also zu einer vollen Stunde, dann
wird hier ein Signal ausgelöst.

00:09:32,430 --> 00:09:37,860
Eigentlich soll die Uhr das Signal aber nur
auslösen, wenn tatsächlich der Alarm eingestellt

00:09:37,860 --> 00:09:43,050
ist. Aber es gibt bisher keine Verbindung oder
keine Kommunikation zwischen der Tatsache,

00:09:43,050 --> 00:09:48,510
ist der Alarm an- oder ausgestellt einerseits, und
der Tatsache, wird denn hier gepiept oder nicht.

00:09:52,290 --> 00:09:55,410
Also müssen wir noch weitere
Informationen transportieren,

00:09:55,410 --> 00:09:57,300
und das können wir über ein Flag machen.

00:09:57,300 --> 00:09:59,610
Das ist so wie eine Variable
in einer Programmiersprache.

00:10:00,270 --> 00:10:04,890
Eine Variable, in der wir Werte speichern
können, zum Beispiel eine Boolesche Variable,

00:10:04,890 --> 00:10:10,500
die können wir an und aus schalten,
true und false, null und eins.

00:10:11,040 --> 00:10:15,000
Die werden wir AL für Alarm nennen
und benutzen, um diesen Piep-Effekt,

00:10:15,000 --> 00:10:24,720
diesen Signalton, unter Kontrolle zu kriegen.
Das heißt einerseits, dass wir beim Auslösen

00:10:24,720 --> 00:10:28,020
dieses Piepens berücksichtigen sollten,
ob denn der Alarm an ist oder nicht,

00:10:28,020 --> 00:10:34,140
also dieses Flag dabei prüfen sollten,
ob es an oder aus ist.

00:10:34,140 --> 00:10:37,200
Andererseits müssen wir natürlich dafür
sorgen, dass es irgendwann auch mal auf

00:10:37,200 --> 00:10:42,450
An und Aus gesetzt wird, das heißt, bei
diesen Übergängen zwischen diesen

00:10:42,450 --> 00:10:47,250
Zuständen hier in der Alarmeinstellung sollten
wir irgendwas mit diesem Alarmflag anstellen.

00:10:50,100 --> 00:10:57,150
Das werden wir gleich sehen, wie das
geschieht, wie das dann aussieht. Aber

00:10:57,150 --> 00:11:04,200
die Grundidee ist: wir setzen dieses Alarmflag
ein, nutzen das beim Auslösen des Signaltons,

00:11:04,200 --> 00:11:08,850
um zu überprüfen, ob dies passieren sein soll, und
manipulieren es beim An- und Ausschalten.

00:11:11,280 --> 00:11:19,830
Des Weiteren werden wir tatsächlich mittels dieses
Alarmflags auch die Nutzung der flachen Historie

00:11:19,830 --> 00:11:25,740
in dem Alarmeinstellungs-Unterzustand,
im linken Teil vermeiden.

00:11:25,740 --> 00:11:33,180
Also, wenn wir sowieso ein Flag einführen, dem wir
ansehen können, ob der Alarm an oder aus ist, dann

00:11:33,180 --> 00:11:37,290
brauchen wir diesen Historienknoten gar nicht,
weil wir genauso gut auch beim Eintritt hier

00:11:37,290 --> 00:11:42,900
einfach nur diesem Flag ablesen können,
ob wir in diesen oder in diesen Zustand wollen.

00:11:49,560 --> 00:11:52,260
Wie sieht das dann aus?

00:11:54,690 --> 00:11:57,210
Damit gehen wir zu diesem Diagramm über.

00:11:57,210 --> 00:11:59,880
Das können wir wieder
mit dem vergleichen, was wir bisher haben.

00:11:59,880 --> 00:12:01,110
Was ändert sich da?

00:12:01,110 --> 00:12:08,970
Also wieder die Hauptteile: hier ändern sich
nicht die Regionen oder hier diese innere

00:12:08,970 --> 00:12:13,890
Struktur dieses linken hierarchischen
Zustandes, aber insbesondere hier bei

00:12:13,890 --> 00:12:22,890
den Übergängen tun wir etwas, indem wir nämlich
hier statt von rechts

00:12:22,890 --> 00:12:28,500
nach links die Historie zu verwenden, das einfach von diesen Flag abhängig
machen, ob wir zum An- oder zum Aus-Zustand gehen.

00:12:28,500 --> 00:12:30,960
Das dürfen wir, indem wir an diesen
Trigger noch eine Bedingung schreiben.

00:12:30,960 --> 00:12:36,540
Wenn Sie in die vorherigen Folien schauen, dann
sehen Sie, dass das eine mögliche Beschreibung

00:12:36,540 --> 00:12:39,240
ist, dass wir einen Trigger haben und noch
eine mögliche Bedingung, und das wäre diese

00:12:39,240 --> 00:12:42,870
Abfrage wieder dieses Alarmflags.
Das muss irgendwo gesetzt werden.

00:12:42,870 --> 00:12:43,680
Das passiert hier.

00:12:44,640 --> 00:12:49,440
Bei dem Schalten zwischen zwei Unterzuständen
dürfen wir auch einen Effekt auslösen.

00:12:49,440 --> 00:12:51,720
So ein Effekt kann sein,
dieses Alarmflag zu wechseln.

00:12:51,720 --> 00:12:55,260
Also wenn wir mit dem
Knopf b nach Off wechseln, setzen wir Alarm auf null und

00:12:55,260 --> 00:12:57,540
wenn wir auf On wechseln,
setzen wir Alarm auf eins.

00:12:57,540 --> 00:13:02,640
Das nutzen wir aus, wenn wir diesen linken
Einstellungszustand betreten, indem wir es

00:13:02,640 --> 00:13:07,560
vom Alarmflag abhängig machen, ob wir hier
oder hier lang wollen. Und ganz wichtig natürlich:

00:13:08,380 --> 00:13:13,660
Wir verwenden das Alarmflag auch hier, um
dieses Piepen, das Signal nur dann auszulösen,

00:13:13,660 --> 00:13:17,890
wenn wir den Null-Zustand betreten und das
Alarmflag aktuell auf eins gesetzt ist.

00:13:22,750 --> 00:13:27,760
Das sind Unterschiede zwischen
diesem Diagramm und diesem Diagramm.

00:13:33,190 --> 00:13:34,870
War es das dann?

00:13:34,870 --> 00:13:42,640
Nun, wir müssen noch irgendwie festlegen
wie das Alarmflag am Anfang gesetzt ist.

00:13:42,640 --> 00:13:46,360
Irgendwann am Anfang wird
dieses Gesamtdiagramm betreten.

00:13:46,360 --> 00:13:51,760
Wir wissen, wir starten in der Stunden-Minute-Anzeige,
weil der Startknoten hier draufzeigt.

00:13:51,760 --> 00:13:58,150
Wir wählen dafür den Standardeintritt, das heißt
den Startzustand für Stunde-Minuten 0:00 Uhr.

00:13:58,150 --> 00:14:01,540
Aber ist das Alarmflag dabei gesetzt oder nicht?

00:14:01,540 --> 00:14:02,740
Das muss noch geklärt werden.

00:14:06,970 --> 00:14:13,090
Das werden wir gleich tun und im Zuge
dessen werden wir auch gleich noch

00:14:13,090 --> 00:14:18,790
den dritten Aspekt modellieren,
nämlich dass die Uhr eine Batterie hat,

00:14:18,790 --> 00:14:26,980
die leer werden kann. Und wenn die Batterie
leer wird, dann soll man sie ersetzen.

00:14:26,980 --> 00:14:30,550
Dabei sollen aber die Stunden und
Minuten auf null zurückgesetzt werden.

00:14:30,550 --> 00:14:33,250
Die Uhr beginnt dann wieder bei
null zu laufen und das Alarmflag,

00:14:33,250 --> 00:14:34,712
also der Alarm, soll am Anfang immer an sein.

00:14:34,712 --> 00:14:40,390
Das ist die Stelle, wo wir auch einstellen, ob
denn der Alarm ursprünglich an ist oder nicht.

00:14:40,390 --> 00:14:46,600
Also wir modellieren, dass die Uhr eine
Batterie hat, die leer werden kann,

00:14:46,600 --> 00:14:52,330
gewechselt werden muss und sich in dem
Fall etwas am Zustand tut.

00:14:52,330 --> 00:14:58,720
Nämlich wir wollen, wenn die Batterie
leer war, dann nicht zum Beispiel über

00:14:58,720 --> 00:15:06,940
die Historie in die Zustände eintreten,
sondern bei 0:00 Uhr. Das ist ein Aspekt.

00:15:06,940 --> 00:15:07,570
Der andere Aspekt:

00:15:07,570 --> 00:15:16,660
Wir wollen, dass dann das Alarmflag auf eins
gesetzt wird. Das heißt, wenn man eine neue Batterie

00:15:16,660 --> 00:15:24,610
in die Uhr einlegt, und auch zu Beginn
einfach, ist der Alarmzustand immer eins.

00:15:28,900 --> 00:15:32,590
Und das könnte man so erreichen:

00:15:32,590 --> 00:15:37,720
Wir packen alles, was wir
bisher an Zustandsdiagramm haben,

00:15:37,720 --> 00:15:43,270
das war dieser Teil, den packen wir noch
mal in einen hierarchischen Zustand,

00:15:43,270 --> 00:15:47,350
nämlich wie die Uhr sich verhält,
wenn die Batterien nicht leer ist.

00:15:47,350 --> 00:15:53,650
Alles, was hier steht, ist genau wie bisher
entwickelt. Und dann haben wir nicht parallel

00:15:54,940 --> 00:15:57,910
dazu, sondern unabhängig davon, einen
weiteren Zustand, der dafür da ist,

00:15:57,910 --> 00:16:02,140
wenn die Batterie leer ist. Und bei
Auslieferung der Uhr ist das Batteriefach

00:16:02,140 --> 00:16:09,190
leer und die Batterie leer, das heißt, hier ist
der äußerste Beginn der gesamten Bearbeitung.

00:16:09,190 --> 00:16:16,210
Wenn eine Batterie eingesetzt wird, dann kommen
wir einerseits in diesen Teil hier und wissen,

00:16:16,210 --> 00:16:20,710
dass wir dann bei diesem Startzustand
beginnen, also über den Standardeintritt

00:16:20,710 --> 00:16:26,170
hier bei null und null starten; und wir
setzen dabei das Alarmflag auf eins.

00:16:26,170 --> 00:16:32,830
Dann passiert, was auch immer
das bisherige Verhalten war,

00:16:32,830 --> 00:16:37,030
also die Zeit schreitet fort, wir
können die Alarmeinstellung wechseln,

00:16:37,030 --> 00:16:41,020
können dabei ein- und ausschalten, so dass
es nur genau dann piept, wenn der Alarm ein ist.

00:16:41,020 --> 00:16:44,170
Wenn wir wieder in Alarmeinstellung
zurückwechseln, wird anhand des

00:16:44,170 --> 00:16:47,095
Flags überprüft, ob denn der
Alarm an ist oder nicht, etc.

00:16:47,095 --> 00:16:49,780
Dann kann immer die Batterie leer werden.

00:16:49,780 --> 00:16:53,650
Das führt dazu, dass wir wieder in
diesem Zustand landen:

00:16:53,650 --> 00:16:55,060
Batterie ist leer.

00:16:55,060 --> 00:16:57,520
Den können wir nur verlassen, indem
wir eine neue Batterie einsetzen.

00:16:57,520 --> 00:16:58,630
Was passiert dabei?

00:16:59,440 --> 00:17:02,020
Dann landen wir wieder bei 0:00 Uhr,

00:17:02,020 --> 00:17:07,000
wie wir nach Verlust der Batterie
und neuem Einsetzen erwarten würden.

00:17:07,000 --> 00:17:12,220
Wir landen bei 0:00 Uhr, weil wir
nicht den Historienknoten verwenden,

00:17:12,220 --> 00:17:18,760
sondern den Standardeintritt,
die beiden Unter-Startzustände

00:17:18,760 --> 00:17:25,525
0 und 0. Und wir setzen beim Einlegen einer
Batterie auch immer das Alarmflag auf eins,

00:17:25,525 --> 00:17:31,060
das heißt, wenn wir dann erstmals a drücken würden,
würden wir immer in diesem Unterzustand landen.

00:17:35,440 --> 00:17:41,380
Und das soll jetzt unsere finale
Modellierung für diese Armbanduhr sein.

00:17:41,380 --> 00:17:46,450
Und da kommen die meisten der Elemente vor, die wir

00:17:46,450 --> 00:17:48,670
zuvor für UML-Zustandsdiagramme
eingeführt haben.

00:17:48,670 --> 00:17:52,480
Es gibt noch viele weitere, die
aber hier nicht Thema sein sollen.
