0:00:00.000,0:00:07.650
So, in this video I would like to
develop once with you an example Petri net.

0:00:07.650,0:00:15.330
In this program, in this app, which
is also linked in the Moodle course.

0:00:15.330,0:00:19.830
On the one hand, I would like to
do this in order to talk through a somewhat

0:00:19.830,0:00:21.630
clearer example with you.

0:00:21.630,0:00:27.330
In the lecture slides, up to now,
you've only seen completely artificial Petri nets.

0:00:27.330,0:00:29.580
So here it will
be about really modeling something.

0:00:29.580,0:00:32.190
On the other hand, I
want to show you this tool.

0:00:32.190,0:00:35.130
I also want to show you how to use it.

0:00:35.130,0:00:37.470
So that you can see it in action, how

0:00:37.470,0:00:41.340
you can use it in practice,
for example, or to explore models.

0:00:41.340,0:00:44.430
So that you can not only draw the
things here (which is of course nice, also

0:00:44.430,0:00:48.780
for your practice tasks maybe), but that
you can also execute the Petri nets.

0:00:48.780,0:00:51.810
So for example you can see the

0:00:51.810,0:00:57.180
firing, which I had just done
manually on my whiteboard last week.

0:00:57.180,0:00:59.070
The program can do that automatically.

0:00:59.070,0:01:01.140
Then you can play
around with your Petri nets.

0:01:01.140,0:01:05.190
So that's all what I want
to teach you with the example here.

0:01:05.190,0:01:13.230
The example itself is one that I
came up with two, three, four years

0:01:13.230,0:01:15.240
ago and now actually use every year.

0:01:15.240,0:01:20.970
Because I couldn't think of anything else at the
time, but it turned out that this example is

0:01:20.970,0:01:26.220
quite nice, because it's still small,
but it models a concrete illustrative situation.

0:01:26.220,0:01:30.570
And above all, there
are also various features in

0:01:30.570,0:01:33.330
it that are interesting
for the exercises, for example.

0:01:33.330,0:01:36.240
So here are resources
used; how to express certain

0:01:36.240,0:01:39.525
conditions that you have in your
head well in a Petri net; etc.

0:01:39.525,0:01:42.750
Although this is a small example,
there are some interesting features in it.

0:01:42.750,0:01:46.680
Namely, I had thought at
the time, I'm going to model

0:01:46.680,0:01:48.540
my son's afternoon schedule.

0:01:50.010,0:01:53.820
This also means that the example
will be a little different each year,

0:01:53.820,0:01:58.980
depending on what my son's
plans are at the moment.

0:01:58.980,0:02:01.590
Whether he just has to
do a dance class from

0:02:01.590,0:02:03.750
school, or just does
his regular sports, or whatever.

0:02:03.750,0:02:05.310
This year, anyway, I'm really only able

0:02:05.310,0:02:08.700
to model the afternoon from
last year because right now, with

0:02:08.700,0:02:15.120
the pandemic, there are new
regulations coming up every week anyway.

0:02:15.120,0:02:19.050
And for example there is no training at
all or even school is not taking place.

0:02:19.050,0:02:21.390
But it's just an example.

0:02:21.390,0:02:25.680
You shouldn't really believe that my
family are such freaks that we

0:02:25.680,0:02:29.220
organize our everyday
life with Petri nets.

0:02:29.220,0:02:33.780
And actually, my son will be of
full age the year after next and then

0:02:33.780,0:02:37.710
it would be absurd to
go on like this anyway. :-)

0:02:37.710,0:02:39.150
Anyway, it's just an example.

0:02:39.150,0:02:46.050
Let's imagine that I would like to
model what a typical afternoon looks like.

0:02:46.830,0:02:51.450
For this I certainly
need places and transitions.

0:02:51.450,0:02:58.200
And I could think, for example, that
there are at least two at transitions (at

0:02:58.200,0:03:01.410
things that happen;
actions that are executed).

0:03:01.410,0:03:08.940
You can see here that I
can place things on my workspace.

0:03:08.940,0:03:11.820
So places, that's these circles here.

0:03:11.820,0:03:14.940
And you can also see
already, there are two types of

0:03:14.940,0:03:16.770
transitions: these filled
and the unfilled.

0:03:16.770,0:03:20.460
In the slides earlier, I
mostly drew the transitions just like

0:03:20.460,0:03:23.010
this: just using unfilled boxes.

0:03:23.010,0:03:26.610
In this program, though, you would
have to take these filled-in rectangles.

0:03:26.610,0:03:31.530
Because this other kind of transitions
in the program is not exactly the

0:03:31.530,0:03:35.370
one we know and need from the lecture.

0:03:35.370,0:03:36.930
So if you work with the program here, you

0:03:36.930,0:03:40.710
would have to take
these filled rectangles as transitions.

0:03:41.550,0:03:43.620
Then you can edit the transitions.

0:03:43.620,0:03:47.640
So for example, you
can change the orientation.

0:03:47.640,0:03:51.600
Let's say I would like
to draw it like this.

0:03:51.600,0:03:58.260
Then I can do it like this.

0:03:58.260,0:04:02.670
And I can give names
to the transitions and places.

0:04:02.670,0:04:05.880
So we can also directly
think about what I want here.

0:04:05.880,0:04:08.220
What I would like
for the two transitions:

0:04:08.220,0:04:12.150
One is to be the homework
that my son has to do.

0:04:12.150,0:04:18.180
And on the other hand, he goes to training, so
he does sports, and that should also be an action.

0:04:19.140,0:04:23.160
Maybe I actually
name the transitions first.

0:04:23.830,0:04:43.720
So for example here the "doing homework"
and this other transition would be the "exercising".

0:04:47.200,0:04:50.740
Then we already know, in order
for such a transition to be

0:04:52.000,0:04:56.020
executed, usually you would
need resources for it somehow.

0:04:56.020,0:05:01.540
So it's certainly not a coincidence
that I've already provided two places here

0:05:01.540,0:05:03.910
where I still want
to put tokens afterwards.

0:05:03.910,0:05:07.180
So you could imagine that there
is just this one place here

0:05:07.180,0:05:09.235
where the set homework is.

0:05:09.235,0:05:15.130
That can be also several
on the day, the set homework.

0:05:15.130,0:05:18.880
And then these would probably
be the completed tasks down here.

0:05:18.880,0:05:21.400
And you could imagine that the action of

0:05:21.400,0:05:25.240
doing homework turns set
homework into done homework.

0:05:25.240,0:05:35.380
And that is exactly when
I create connections in between.

0:05:35.380,0:05:41.110
As you can see, the tool
always adds a one to the connections.

0:05:41.110,0:05:45.070
This corresponds to the representation that
I had on the slides, that

0:05:45.070,0:05:46.530
there would be nothing
at all at the arrow.

0:05:46.530,0:05:49.510
I had said that you
can have numbers on it.

0:05:49.510,0:05:52.450
That corresponds to the
weighting of such an edge.

0:05:53.170,0:05:54.160
And I had said:

0:05:54.160,0:05:56.260
If there is nothing on
it, then we implicitly mean 1.

0:05:56.260,0:05:58.750
In fact, in the tool,
the 1 is always written down.

0:05:58.750,0:06:02.200
And over here you could just ask:

0:06:02.200,0:06:05.740
What are the meanings of the places here?

0:06:05.740,0:06:09.820
Here it's about the
training that's coming up,

0:06:09.820,0:06:20.320
and for example here the post place might
be that my son is back from training.

0:06:20.320,0:06:28.910
Now you can also draw connections here,
and then you can consider that while there's

0:06:28.910,0:06:33.110
probably only training once a day, there
might be several homework assignments to do.

0:06:33.110,0:06:38.630
And that would be expressed by having
different numbers of tokens on these spots.

0:06:38.630,0:06:41.900
Up here with this green plus,
you can add tokens to places.

0:06:41.900,0:06:46.730
So maybe there's three homeworks
a day and one time training.

0:06:46.730,0:06:52.100
And then this could be my
first Petri net expressing this fact.

0:06:53.120,0:06:54.440
What can I do with
it now, with this Petri net?

0:06:54.440,0:06:55.400
I can execute it.

0:06:55.400,0:06:58.850
So, of course, I can look at
it with our intuition from the lecture

0:06:58.850,0:07:04.160
and say that I could, for example, execute
this transition because there is a token here.

0:07:04.160,0:07:05.000
There are even three lying there.

0:07:05.000,0:07:06.350
If I were to execute the transition once,

0:07:06.350,0:07:08.930
a token would disappear from
above and end up down here.

0:07:08.930,0:07:10.070
And I can actually do that.

0:07:10.070,0:07:12.290
I can go to animation mode here, and then

0:07:12.290,0:07:16.490
we'll see an animation history here
on the left, for one thing.

0:07:17.810,0:07:19.760
First of all, the start marking.

0:07:19.760,0:07:22.430
That's the one that I painted.

0:07:22.430,0:07:24.620
And then we see here in red now

0:07:24.620,0:07:26.801
those transitions that
are currently activated.

0:07:26.801,0:07:27.740
That's both of them at the beginning.

0:07:27.740,0:07:30.320
Then I can
actually execute transitions here.

0:07:30.320,0:07:32.480
I can say: I click on
this, I want to execute this.

0:07:32.480,0:07:35.720
Then a) what has happened
is recorded here on the left,

0:07:35.720,0:07:39.440
and b) the transition has just been
executed and a token has moved down here.

0:07:39.440,0:07:42.620
Then I can execute further transitions.

0:07:42.620,0:07:46.880
And here we also see that
after I've executed the train once,

0:07:47.870,0:07:50.180
this transition is no
longer activated, no longer red.

0:07:50.180,0:07:54.440
That means I can only continue to fire
here and then I would have executed the

0:07:54.440,0:07:57.530
petri net once completely and
no further actions would be possible.

0:07:57.530,0:08:01.046
And here on the left I
would see what the execution history was:

0:08:01.046,0:08:02.630
Do homework, train,
do homework, do homework.

0:08:06.230,0:08:06.890
What's also interesting here:

0:08:06.890,0:08:11.630
You can also, instead of clicking
through yourself, tell the system to

0:08:11.630,0:08:16.250
just execute any
sequence of enabled transitions.

0:08:16.250,0:08:20.000
I can say "randomly
fire a transition" up here.

0:08:20.000,0:08:23.390
And then the system would take
the right one, for example, and

0:08:23.390,0:08:28.160
I would see a
possible execution sequence here.

0:08:28.160,0:08:30.410
Then, without clicking through
myself, I could simply

0:08:31.250,0:08:33.110
try it out several times and see:

0:08:33.110,0:08:35.910
Do we get sequences here that make sense?

0:08:35.910,0:08:38.640
If this is not the case, then
perhaps I have made a modeling error.

0:08:38.640,0:08:43.800
In this simple case, of course,
there is not much going on.

0:08:43.800,0:08:51.840
There are some possible sequences here that
always consist of: do tasks three times,

0:08:51.840,0:08:52.980
train once, in any order.

0:08:53.550,0:08:57.540
Because, if we're in the
language of parallelism and concurrency, these

0:08:57.540,0:09:00.840
are completely independent
blocks of action.

0:09:00.840,0:09:05.670
So they're not linked
in any way, therefore concurrent,

0:09:05.670,0:09:09.030
and any order would be possible.

0:09:11.250,0:09:12.720
Now that was still very trivial.

0:09:12.720,0:09:13.500
Now one could consider:

0:09:15.480,0:09:21.240
How could we make the model more interesting,
for example, to represent several days as well?

0:09:21.240,0:09:22.710
First of all, one could say:

0:09:22.710,0:09:24.690
These blocks do not
have to be completely independent.

0:09:24.690,0:09:28.500
One could also imagine that there are
not simply three tokens here at the

0:09:28.500,0:09:32.370
beginning and one token here, but
that these places must first be filled.

0:09:33.180,0:09:36.450
There is a start of the
day or the afternoon, and then

0:09:36.450,0:09:39.120
the tasks are set
and the training is prepared.

0:09:39.120,0:09:39.720
And not simple:

0:09:39.720,0:09:40.560
There are already tokens lying there.

0:09:40.560,0:09:44.640
How could this
be organized or represented?

0:09:46.590,0:09:49.680
For example, you could have
a source like this here.

0:09:49.680,0:09:53.070
So a transitions, which is
to be fired at the beginning.

0:10:00.540,0:10:02.670
What could it be called?

0:10:02.670,0:10:05.010
It could be called
"coming out of school".

0:10:07.020,0:10:09.120
The action that starts the afternoon.

0:10:09.120,0:10:11.550
My son is coming out of school.

0:10:11.550,0:10:21.450
And I'm going to take the tokens back
down from these places and instead make sure that

0:10:21.450,0:10:26.430
when the action "coming out of school"
is executed, then these two places are filled.

0:10:26.430,0:10:31.440
And the right place actually with
a token through that 1, and on

0:10:31.440,0:10:49.170
the left arrow I'd like
to have the weight three.

0:10:49.170,0:10:54.570
So that would be equivalent to what we had
earlier, which is that three homeworks would be set directly.

0:10:54.570,0:10:58.140
Now the model would look like this.

0:10:58.140,0:11:00.000
So at the beginning
nothing is assigned at

0:11:00.000,0:11:02.396
all, but there is a
transition that has no preconditions.

0:11:02.396,0:11:04.080
That is, it can fire directly.

0:11:04.080,0:11:08.610
And if I fire it, then
the three tokens would land here,

0:11:08.610,0:11:12.420
one token would land here, and
then I could simulate processes like before.

0:11:16.470,0:11:21.780
Now we can simulate several days.

0:11:21.780,0:11:22.350
We can say:

0:11:24.450,0:11:28.440
Come back from school,
train, homework, homework, homework, come

0:11:28.440,0:11:34.890
back from school, do
more homework, train again, ...

0:11:34.890,0:11:36.360
Different sequences are possible.

0:11:38.250,0:11:43.800
Now you can also determine, if I model
it this way, something is awkward or strange.

0:11:43.800,0:11:47.700
Because it would also be possible
here, since there are no preconditions for

0:11:47.700,0:11:51.990
this transition, that simply coming out
of school again and again, so

0:11:51.990,0:11:54.360
to speak, without ever
doing homework or training.

0:11:54.360,0:11:57.530
That is certainly
not a sensible sequence.

0:11:57.530,0:12:00.500
We also see that a
lot of homework then accumulates

0:12:00.500,0:12:01.760
here without ever being done.

0:12:02.840,0:12:07.970
That's because of my modeling, which
is a little bit awkward at

0:12:07.970,0:12:13.010
the moment, that I just have this
transition up here with no precondition at all.

0:12:13.640,0:12:15.230
That would have to be fixed.

0:12:15.230,0:12:15.800
Maybe you could say:

0:12:15.800,0:12:17.540
There is one more place.

0:12:29.540,0:12:41.090
Let it just be called "Start",
for example, and it contains one token.

0:12:41.090,0:12:49.460
And this one token is a
precondition for getting out of school.

0:12:50.570,0:12:54.650
That's how I imagine it.

0:12:54.650,0:12:58.730
That is, once this action "coming out
of school" would be able to be executed.

0:12:59.390,0:13:03.200
After that, the homework would be
occupied and the training would be prepared.

0:13:03.200,0:13:04.790
So, let's try this out.

0:13:04.790,0:13:12.350
If I proceed like this, I could
"come from school" here at the beginning,

0:13:12.350,0:13:14.840
and then do any
order of homework and training.

0:13:14.840,0:13:17.510
And it can't happen, like just
now, coming out of school several times.

0:13:17.510,0:13:20.810
Because it is possible exactly
once here at the beginning.

0:13:24.290,0:13:30.110
Then what else could I
imagine that belongs to an afternoon?

0:13:30.110,0:13:32.840
Maybe it is mean that
you can only do homework

0:13:32.840,0:13:39.410
and have no - besides sports
- other leisure activities or opportunities.

0:13:39.410,0:13:42.620
For example, my
son would actually naturally

0:13:44.480,0:13:46.790
spend part of the afternoon playing.

0:13:46.790,0:14:10.850
So there may still be both
an action and resources for that.

0:14:10.850,0:14:25.940
The action would be "playing", and
that would be playing with the Playstation.

0:14:25.940,0:14:36.170
Therefore there has to be a token on
it, so that this action can then be executed.

0:14:36.170,0:14:38.600
The play action has no postcondition.

0:14:38.600,0:14:39.950
Playing is not productive, so to speak.

0:14:39.950,0:14:40.880
Nothing comes out of it.

0:14:40.880,0:14:43.640
While with the "doing homework"
just completed tasks come out.

0:14:43.640,0:14:46.070
With playing nothing more comes out.

0:14:48.110,0:14:51.830
Then you could also imagine
that it might be quite nice

0:14:51.830,0:14:55.160
that you can play not
only once, but that (especially after

0:14:55.160,0:15:00.380
doing homework) you
can play several times.

0:15:00.380,0:15:03.230
Now that would make it so that
when homework was done, a) the homework

0:15:03.230,0:15:09.710
was done, and b) there would
be other tokens here on this Playstation

0:15:09.710,0:15:13.850
site that would allow you to
play more often than just exactly once.

0:15:16.670,0:15:17.990
I wanted to introduce that.

0:15:18.770,0:15:22.640
And then I had another idea.

0:15:22.640,0:15:28.070
In the execution just now there was a
start and at some point it was over.

0:15:28.070,0:15:31.370
But it would certainly also make
sense to perhaps also explicitly record this

0:15:32.750,0:15:37.100
conclusion of the day/afternoon as an
action in the execution log (which

0:15:37.100,0:15:40.310
was always created on the left
when I ran a simulation like this).

0:15:40.310,0:15:41.900
There must be a transition for this.

0:15:41.900,0:15:48.200
It must have a meaningful name, and it
would be executed at the end of the day.

0:15:48.200,0:15:53.420
So it could be called: "Day's work done".

0:15:57.230,0:15:59.730
And when is the day's work done?

0:15:59.730,0:16:06.750
Well, when the homework is
done and the training is finished.

0:16:06.750,0:16:12.030
And the day's work is only really done
when all three homework tasks have been done,

0:16:12.030,0:16:17.460
which have been created up here (you
can still see the 3 up there).

0:16:18.420,0:16:23.490
So we expect these three homeworks to
be done, then there are three tokens here.

0:16:23.490,0:16:28.140
And only when that's the
case, it should be possible to

0:16:28.140,0:16:34.020
execute this transition
that ends the afternoon.

0:16:34.020,0:16:41.820
Okay, that would be
my current modeling status now.

0:16:41.820,0:16:47.340
And then we can take another look
at what actions are possible as a result.

0:16:48.600,0:16:56.640
Whether we already have a
model that somehow captures all intentions.

0:16:56.640,0:16:59.100
But we can already see
directly that there is something strange

0:16:59.100,0:17:03.030
here when we look
at the activated transitions.

0:17:03.030,0:17:07.440
That here the action to play

0:17:07.440,0:17:13.170
is already possible before
even coming back from school.

0:17:13.170,0:17:14.400
That is certainly awkward.

0:17:14.400,0:17:19.830
If we ignore that for the moment,
then otherwise the processes already make sense.

0:17:19.830,0:17:25.680
So coming from school, maybe
doing homework, playing once, even

0:17:25.680,0:17:28.800
being able to play again
(because homework has already been

0:17:28.800,0:17:33.540
done), then maybe going to
practice, then after practice unfortunately having

0:17:33.540,0:17:36.210
to do the more
homework, and then deciding:

0:17:36.210,0:17:38.430
Is good for today, day's work

0:17:38.430,0:17:44.370
done, or maybe also still play
and only then maybe finish the day.

0:17:45.990,0:17:48.210
So that would
be already sensible sequences.

0:17:48.210,0:17:56.580
And even if I do the random
sequences again, meaningful sequences come out (except

0:17:56.580,0:18:02.220
for this aspect, that playing could
happen before coming back from school).

0:18:06.000,0:18:13.850
How can I deal with
the problem that here unrealistically the

0:18:13.850,0:18:18.560
playing (or the afternoon) starts
before coming back from school?

0:18:18.560,0:18:20.900
That would still have
to be controlled somehow.

0:18:20.900,0:18:22.010
I could say, of course:

0:18:22.010,0:18:24.230
We'll control this by
not having this badge here.

0:18:24.230,0:18:28.220
But that would only
help on the first day.

0:18:28.220,0:18:31.040
Let's imagine that in
reality, of course, we don't

0:18:31.040,0:18:32.930
want to model just one afternoon.

0:18:32.930,0:18:33.500
And let's assume for this that

0:18:35.150,0:18:44.510
we can fill this starting point again,
namely when the day's work is done.

0:18:44.510,0:18:50.390
After a full run, the next day can begin.

0:18:50.390,0:19:07.200
If I do it this way, it won't
help me to remove this one token here.

0:19:09.990,0:19:11.070
Then it would still be like this:

0:19:11.070,0:19:13.740
Once out of school, there
would be three homework assignments

0:19:13.740,0:19:17.640
here, and when those are
done, tokens will accumulate here.

0:19:17.640,0:19:19.875
They might not all be used up that day.

0:19:19.875,0:19:24.360
And then when the day's work is
done and the next day starts, suddenly I

0:19:24.360,0:19:27.600
would be able to play
again before coming back from school.

0:19:27.600,0:19:29.460
So somehow we would still have to make

0:19:29.460,0:19:32.070
sure that this play
action doesn't just always happen.

0:19:32.070,0:19:36.960
But not only depends on
the occupancy of this place

0:19:36.960,0:19:40.740
here, but also depends on whether
we just have afternoon or not.

0:19:40.740,0:19:48.480
So whether the action "come out of
school" was carried out in advance or not.

0:19:48.480,0:19:56.460
It may not be directly at the
beginning of a new day (after the

0:19:56.460,0:20:00.720
day's work of the previous day
is done) already this play action applicable.

0:20:02.310,0:20:03.120
Now you can ask yourself:

0:20:03.120,0:20:04.680
How could this be organized?

0:20:04.680,0:20:05.370
Is it possible to prevent this?

0:20:05.880,0:20:11.400
And there is a possibility, this
is a typical modeling trick or

0:20:11.400,0:20:14.610
modeling pattern in Petri nets.

0:20:14.610,0:20:18.630
If you want to make
this execution dependent on something,

0:20:18.630,0:20:22.950
then of course you have to have
a place from which you consume a token.

0:20:22.950,0:20:26.910
Because that's the way
you constrain the execution of

0:20:26.910,0:20:29.820
a transition is: that
it depends on a precondition.

0:20:29.820,0:20:33.330
So, we'd like to have
a place here and the

0:20:33.330,0:20:38.070
meaning of it should ultimately
be that it's in the afternoon.

0:20:38.070,0:20:40.650
This passage is
supposed to somehow express

0:20:40.650,0:20:42.990
the fact that it's
afternoon right now, not morning.

0:20:42.990,0:20:49.530
So I'm going to
name those appropriately for now.

0:20:50.100,0:20:51.210
I call it "afternoon".

0:20:51.210,0:20:57.840
Of course, it must not
be occupied at the beginning.

0:20:58.920,0:21:04.860
Because before this "coming out
of school" transition has been executed,

0:21:04.860,0:21:12.540
it's not yet afternoon (so it's still
night or morning or in the school day).

0:21:14.280,0:21:17.250
But what I want to express is:

0:21:17.250,0:21:22.890
When coming out of school, then
this token is put down here.

0:21:22.890,0:21:24.750
Then we know it's now afternoon.

0:21:25.620,0:21:28.860
And I want to use that
then to be able to play.

0:21:28.860,0:21:33.330
So only when it's
afternoon, it's allowed to play.

0:21:35.580,0:21:36.960
Is it already?

0:21:36.960,0:21:38.160
Let's try it out.

0:21:38.160,0:21:43.230
Yes, when I come from school,
then it is in the afternoon,

0:21:43.230,0:21:49.110
and there is homework to be done, and it
can be trained; then we could proceed like this,

0:21:49.110,0:21:52.350
then it is also allowed to
play, because this place is occupied here.

0:21:53.250,0:21:56.430
There is a token consumed from here on the one
hand, and on the other hand, it is looked whether

0:21:56.430,0:21:57.720
it is in the afternoon at all.

0:21:57.720,0:22:00.060
The problem is:

0:22:00.060,0:22:01.380
After that you could never play again.

0:22:03.360,0:22:07.560
Although you have accumulated
tokens here, so to speak,

0:22:07.560,0:22:12.000
because you have done your homework nicely,
you are still not allowed to play again.

0:22:12.000,0:22:13.080
It can't be like that.

0:22:13.080,0:22:20.610
But what we could do is
actually let this arrow work both ways.

0:22:20.610,0:22:24.660
So to perform the action "play",
it must be in the afternoon.

0:22:24.660,0:22:26.040
So there has to be a token here.

0:22:26.040,0:22:28.380
Only when this token is
there, can play be performed.

0:22:28.380,0:22:30.810
But we do not want to destroy this token.

0:22:30.810,0:22:35.100
We can prevent this by
having an arrow in both directions.

0:22:35.100,0:22:44.760
Now this looks like a double
arrow, but in reality it's two arrows.

0:22:44.760,0:22:47.010
One from here to here,
and one from here to here.

0:22:47.010,0:22:53.430
This ensures that when this spot is occupied,
and only then, can it be played at all.

0:22:53.430,0:22:56.820
Then this token is used up,
but it's put right back down.

0:22:58.650,0:23:05.550
Now I could actually,
for example, accumulate several tokens

0:23:05.550,0:23:07.590
here, earned by doing homework.

0:23:07.590,0:23:10.380
And then I could play as
often as there are tokens here.

0:23:10.380,0:23:12.360
But also only because
it is in the afternoon.

0:23:12.360,0:23:18.000
Now when I perform this action, this
one token is consumed, but immediately put back.

0:23:18.000,0:23:21.270
While these tokens are really
consumed, but not put back.

0:23:21.270,0:23:27.570
You see, the transition remains activated as
long as the one token is here

0:23:27.570,0:23:32.280
(but it is also put back) and
as long as there are tokens here.

0:23:32.280,0:23:34.680
Now it would not
be possible to continue playing.

0:23:34.680,0:23:40.320
But not because it is not afternoon,
but because no tokens have been saved

0:23:40.320,0:23:43.350
here (which could be done
by doing homework again, for example).

0:23:46.230,0:23:47.370
This looks good.

0:23:47.370,0:23:49.380
What happens next?

0:23:49.380,0:23:51.600
Then the day's work is done.

0:23:51.600,0:23:54.390
Then a new afternoon starts.

0:23:54.390,0:23:55.470
This is awkward.

0:23:55.470,0:23:58.890
We don't really want
two tokens to accumulate here.

0:23:58.890,0:24:01.590
This afternoon token, it's really
just to represent the fact:

0:24:01.590,0:24:02.070
It's afternoon.

0:24:02.070,0:24:04.590
It's not afternoon twice
at the same time.

0:24:04.590,0:24:07.350
That's really supposed to be a
spot where there's always zero tokens or

0:24:07.350,0:24:11.160
one token, and it depends on whether it's
afternoon or whether my son is still in school.

0:24:12.390,0:24:13.200
How can we fix this?

0:24:13.950,0:24:19.800
The obvious thing is
that this same afternoon information

0:24:19.800,0:24:20.940
is consumed when the day ends.

0:24:20.940,0:24:29.670
(I'm trying to arrange this so that

0:24:29.670,0:24:33.510
it's easier to read everything. Other than
that, I'm not changing anything right now).

0:24:43.910,0:24:47.420
What would be the happening now?

0:24:47.420,0:24:53.000
Coming out of
school, then it's afternoon.

0:24:53.000,0:24:55.430
That means it can be played
as long as there are tokens here.

0:24:55.430,0:24:59.090
So it could also be
played directly, and homework done.

0:24:59.090,0:25:01.700
This leads to
more tokens accumulating here.

0:25:01.700,0:25:03.380
You don't have to use them up right away.

0:25:03.380,0:25:05.450
It could also be trained,

0:25:05.450,0:25:09.290
and the last homework is done,
and then the day is ended.

0:25:09.290,0:25:12.170
Then there can be no more playing either.

0:25:12.170,0:25:14.570
It is at night
or the next school morning.

0:25:14.570,0:25:18.290
That is, although there are still tokens
accumulated here, can not be played now.

0:25:18.290,0:25:20.120
Because has not yet returned from school.

0:25:20.120,0:25:24.050
If again from the school is returned,
then it is in the afternoon, then can

0:25:24.050,0:25:31.130
be played, can be used up here even
the saved up tokens of the previous day.

0:25:31.130,0:25:35.210
So if at the lecture was
not so often the Playstation on, this

0:25:35.210,0:25:39.200
can now be used more often the next day.

0:25:42.320,0:25:47.480
If we simply let this model
run randomly, i.e. really carry out

0:25:47.480,0:25:54.890
random executions here, then I
could perhaps negotiate with my

0:25:54.890,0:26:03.980
son whether he finds
the sequences/possibilities listed here acceptable.

0:26:03.980,0:26:07.160
Or if we have to change
some parameters, and if he thinks

0:26:07.160,0:26:10.580
he can play during school
hours (because we don't live

0:26:10.580,0:26:13.310
that far away from the school and
he could go home during break) or whatever.

0:26:13.310,0:26:20.600
There is *one* idea
of design captured here.

0:26:20.600,0:26:23.300
One can discuss based on the Petri net.

0:26:23.300,0:26:26.420
One can also look at these dynamics,

0:26:26.420,0:26:32.030
i.e. the sequences generated, and come
to an assessment based on those:

0:26:32.030,0:26:34.130
Did one model correctly what one wanted?

0:26:34.130,0:26:36.440
Or are there still changes to be made?

0:26:36.440,0:26:43.760
One can even generate long
sequences here in one fell swoop.

0:26:43.760,0:26:44.840
So you can say:

0:26:44.840,0:26:47.360
I would like to simply
see a history here on the

0:26:47.360,0:26:51.530
left, where the system
has executed about 50 steps.

0:26:51.530,0:26:56.010
Then I can still say
how fast that should go.

0:26:56.010,0:27:03.900
And then I can watch the system at work,
so to speak, and see the processing on the left.

0:27:09.210,0:27:10.950
Of course, further
refinements are possible.

0:27:10.950,0:27:26.029
You could think, for example, that maybe
this saving up of tokens is too much.

0:27:26.029,0:27:31.770
Maybe I'm a very strict father and
don't want, even if Monday, Tuesday, Wednesday

0:27:31.770,0:27:34.950
always homework was done diligently,
that then on Thursday somehow ten

0:27:34.950,0:27:38.610
times is played in one go,
because here all the tokens are accumulated.

0:27:38.610,0:27:41.130
If I wanted to prevent that,
I could still say, for example:

0:27:41.130,0:27:57.060
There is a weekly budget, and there may
be five tokens at the beginning of the

0:27:57.060,0:28:02.070
week, and if I then make
playing dependent on this, then I

0:28:02.070,0:28:08.550
could, so to speak, limit the
total number of executions of this action.

0:28:09.150,0:28:11.490
It would be absolutely
limited by this weekly budget.

0:28:11.490,0:28:16.290
And it would be limited by the
fact that it can only be played in

0:28:16.290,0:28:18.300
the afternoon, i.e. when
this position is occupied.

0:28:18.300,0:28:22.080
And it would be
limited independently of the

0:28:22.080,0:28:25.080
total weekly budget by
whether homework has been done.

0:28:25.080,0:28:32.040
Maybe this is my final decision now,

0:28:32.040,0:28:39.210
how afternoons can be arranged.

0:28:41.130,0:28:42.270
Maybe a bit strict, and as I said:

0:28:42.270,0:28:46.500
This is just
a somewhat tongue-in-cheek example.

0:28:50.340,0:28:55.630
I'm also uploading this as a file so you
can play around with it yourself in the tool.

0:28:55.630,0:28:57.400
But above all, you should
use the tool to create

0:28:57.400,0:29:02.440
your own Petri nets or to
rebuild some, to experiment with them.

0:29:02.440,0:29:05.260
Be it for exercises,
where you have to model

0:29:05.260,0:29:10.240
something, or be it also for examples from
the lecture from the slides or from the exercises,

0:29:10.240,0:29:14.320
where it is not about such
everyday modeling, but about artificial examples.

0:29:14.320,0:29:18.070
It might be easier for
you to work on some

0:29:18.070,0:29:19.720
tasks, if you don't just work with

0:29:19.720,0:29:24.040
paper, but actually build the
Petri nets and interact with them.

0:29:24.040,0:29:30.160
So perform actions, check
which sequences might be

0:29:30.160,0:29:31.780
possible, when to fire and when not, etc.

0:29:31.780,0:29:35.380
This tool is very convenient for that.
