0:00:01.730,0:00:10.769
Welcome to this video about this task to create
a class diagram with inheritances.

0:00:10.769,0:00:16.440
For this task we have been given a little
scenario.

0:00:16.440,0:00:21.980
Which we have to consider in order to create
a simple class diagram.

0:00:21.980,0:00:30.240
Also, we should think about the properties
that the actors and institutions in this model

0:00:30.240,0:00:33.750
must have.

0:00:33.750,0:00:41.520
And then, give an appropriate class diagram
with inheritances.

0:00:41.520,0:00:46.050
And we also have to define the types of the
attributes.

0:00:46.050,0:00:51.930
For this task I want to read the little scenario.

0:00:51.930,0:00:54.570
Different persons appear in our model.

0:00:54.570,0:01:01.550
The differently aged students, examiners and
the examination office.

0:01:01.550,0:01:05.110
Of course, students and examiners are persons.

0:01:05.110,0:01:10.299
Every person has a name but only students
have a matriculation number.

0:01:10.299,0:01:15.420
Examiners are somewhat sensitive about their
age, so, it should not be stored for them.

0:01:15.420,0:01:18.990
Examiners are responsible for a specific course.

0:01:18.990,0:01:23.240
So, that course’s name should be stored
for them.

0:01:23.240,0:01:26.820
The examination office has a number of employees.

0:01:26.820,0:01:34.119
That number, but no further information about
employees needs to be stored in order to distribute

0:01:34.119,0:01:36.850
the workload.

0:01:36.850,0:01:49.680
Okay so, we can start with the first sentence
which tell us a lot about this class diagram.

0:01:49.680,0:02:04.540
It tell us that are different persons in our
model. There are differently aged students.

0:02:04.540,0:02:09.899
So, first of all, we have student as a
class.

0:02:09.899,0:02:19.459
Then, we have examiners.

0:02:19.459,0:02:30.640
And we have the examination office.

0:02:30.640,0:02:36.790
We write those classes in Camel Case which
means that the first letters are uppercase letters

0:02:36.790,0:02:40.000
and all the other letters are lowercase.

0:02:40.000,0:02:42.980
But if we have a word which consist in multiple
words.

0:02:42.980,0:02:52.409
Then, we use a capital letter for every starting
letter of a word and leave the spaces out.

0:02:52.409,0:02:56.600
So, like we did here with the examination
office.

0:02:56.600,0:03:00.620
And we use singular forms for our classes.

0:03:00.620,0:03:08.520
So, we have the examiner class, the student
class and the examination office.

0:03:08.520,0:03:16.170
And we have another class given in the next
sentence.

0:03:16.170,0:03:21.150
Where it states that of course students and examiners
are persons.

0:03:21.150,0:03:28.950
So, we have another class called “person”.

0:03:28.950,0:03:34.780
And there it states that every person has a
name.

0:03:34.780,0:03:38.610
But only students have matriculation numbers.

0:03:38.610,0:03:48.819
So, we have the name for the persons.

0:03:48.819,0:03:57.920
And for students we have the matriculation
number.

0:03:57.920,0:04:02.819
Okay, and this was the information about the
persons.

0:04:02.819,0:04:09.819
But we also have info about the students which
was that they are aged.

0:04:09.819,0:04:21.610
So, we also have the age for the students.

0:04:21.610,0:04:43.770
And now, we have the examiners and they do not
have their ages stored.

0:04:43.770,0:04:45.110
This is important.

0:04:45.110,0:04:51.330
Because if they would have the age then we
would have to define the age within Person.

0:04:51.330,0:05:00.160
But the ages are only stored for the students,
so we don’t store the age for the examiners.

0:05:00.160,0:05:03.970
And the examiners are responsible for a specific
course.

0:05:03.970,0:05:07.840
So, we should store the course name.

0:05:07.840,0:05:14.310
I have written the matriculation number and
age as “Int” here.

0:05:14.310,0:05:20.380
Because I think it should be quite clear that
the age is of course an Int value.

0:05:20.380,0:05:24.520
And the matriculation number is usually an
Int.

0:05:24.520,0:05:28.030
So, we have it in Duisburg-Essen as well.

0:05:28.030,0:05:36.479
So, we use just an Int value here and the
name it’s of course “String” and we

0:05:36.479,0:05:41.500
have the course now here for the examiner.

0:05:41.500,0:05:43.650
And this is the name of the course.

0:05:43.650,0:05:47.509
So, obviously it should be “String” as
well.

0:05:47.509,0:05:54.060
So, we define the course for the examiner.

0:05:54.060,0:06:00.800
And the examination office has the number
of employees.

0:06:00.800,0:06:08.850
So, as we talk about a number, we
should use “Int” as a type here.

0:06:08.850,0:06:21.490
So, we can say, the examination office has
the number of employees as Int so we can call it,

0:06:21.490,0:06:29.270
for instance, “employees” and say there is
an Int value for that.

0:06:29.270,0:06:40.270
There’s no further information stored about
the employees.

0:06:40.270,0:06:46.030
So, we just have this number.

0:06:46.030,0:06:55.349
And that’s everything besides the inheritances
that are required.

0:06:55.349,0:07:04.460
And this information, we get from the sentence
that students and examiners are persons.

0:07:04.460,0:07:09.440
This implies that we should have an inheritance
here.

0:07:09.440,0:07:13.460
So, students should inherit from Person.

0:07:13.460,0:07:14.919
But also, the examiners.

0:07:14.919,0:07:23.050
So, we can draw an inheritance to Person
from both of them.

0:07:23.050,0:07:32.800
And now we got the whole diagram for this
task.
