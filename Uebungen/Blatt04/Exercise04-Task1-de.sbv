0:00:01.060,0:00:07.490
In dieser Aufgabe haben wir dieses Klassendiagramm
gegeben, was die Vektorgrafik-Funktionen und

0:00:07.490,0:00:09.960
Objekte, die wir in der Vorlesung kennengelernt
haben, teilweise darstellt.

0:00:09.960,0:00:16.560
Und unsere erste Teilaufgabe dafür ist, einfach
nur anzugeben, auf Objekten welcher der angegebenen

0:00:16.560,0:00:22.410
Klassen, also diese Klassen hier, sind die
Methoden Scale, Rotate, Move und Extent aufrufbar.

0:00:22.410,0:00:23.650
Also die Funktion, die wir hier haben.

0:00:23.650,0:00:26.099
Das heißt, wir haben hier die Objekte.

0:00:26.099,0:00:32.790
Also wenn wir anhand dieses Klassendiagramms
Objekte instanziieren würden, welche Objekte

0:00:32.790,0:00:34.710
könnten dann diese Funktionen hier aufrufen?

0:00:34.710,0:00:38.570
Dafür gehen wir einfach mal alle diese Klassen
durch und gucken uns das an.

0:00:38.570,0:00:43.800
Zum Anfang wäre natürlich Picture sehr verlockend,
denn Picture hat die ganzen Funktionen drinstehen.

0:00:43.800,0:00:47.870
Also müssten Objekte vom Typ Picture auch
die Funktion aufrufen können.

0:00:47.870,0:00:51.760
Hier müssen wir aber aufpassen, denn hier
oben steht Picture ist eine Abstract-Klasse.

0:00:51.760,0:00:57.150
Das heißt, von der Klasse Picture kann es
keine direkten Instanzen geben.

0:00:57.150,0:01:01.240
Das ist die Definition einer Abstract-Klasse.

0:01:01.240,0:01:07.439
Also müssen wir weiter gucken, welche Klassen
könnten denn diese Funktionen erben?

0:01:07.439,0:01:09.790
Also hier haben wir einen Vererbungsfall.

0:01:09.790,0:01:16.020
Das heißt, alle Klassen, die hier über die
Vererbung mit Picture verbunden werden, können

0:01:16.020,0:01:20.270
diese Funktion aufrufen, denn im Endeffekt
haben sie diese Funktion von Picture bekommen.

0:01:20.270,0:01:23.710
Das heißt, Circle kann auf jeden Fall diese
Funktion aufrufen.

0:01:23.710,0:01:28.530
Rectangle kann diese Funktion aufrufen und
Path kann auch diese Funktion aufrufen.

0:01:28.530,0:01:33.749
Jetzt haben wir diese vier Klassen abgedeckt,
nun müssen wir uns noch die letzte hier unten

0:01:33.749,0:01:34.749
angucken, Point.

0:01:34.749,0:01:38.840
Point ist auch mit Path verbunden und Path
erbt diese Funktion.

0:01:38.840,0:01:42.810
Allerdings ist das hier keine Vererbung, sondern
einfach nur eine Aggregation und über eine

0:01:42.810,0:01:47.590
Aggregation werden keinerlei Attribute oder
Methoden weitergegeben.

0:01:47.590,0:01:55.359
Das heißt, Point ist einfach nur irgendwie
mit Path verbunden, semantisch, aber es erbt

0:01:55.359,0:01:57.880
nicht diese Funktion, was bedeutet, dass Point
nicht dazu gehört.

0:01:57.880,0:02:03.030
Also die Antwort zur Teilaufgabe A wäre einfach
nur, Instanzen der Klasse Circle, Rectangle

0:02:03.030,0:02:06.270
und Path können diese fünf Funktionen alle
aufrufen.

0:02:06.270,0:02:15.599
Und in Teilaufgabe zwei sollen wir nun die
Klasse Picture hier oben vervollständigen.

0:02:15.599,0:02:21.870
Wir sehen, dass bei den Funktionen hier nur
die Namen angegeben sind und die Angabe der

0:02:21.870,0:02:25.140
Argumente und welche Typen die Argumente haben,
fehlt.

0:02:25.140,0:02:29.599
Das sollen wir ändern, und zwar so, dass
die Methoden-Typen der objektorientierten

0:02:29.599,0:02:32.489
Sicht auf die Vektorgrafik-Operationen entsprechen.

0:02:32.489,0:02:35.079
Diese Funktionen kennen wir schon aus der
Vorlesung.

0:02:35.079,0:02:36.599
Ich hole die mal hier dazu.

0:02:36.599,0:02:42.659
Wir haben hier Scale, Color, Rotate, Move
und weiter unten ist auch Extent, da komme

0:02:42.659,0:02:43.930
ich gleich zu.

0:02:43.930,0:02:49.650
Und dafür haben wir hier die Typ-Signaturen
angegeben, die uns sagen, das erste Element

0:02:49.650,0:02:50.660
ist vom Typ Picture.

0:02:50.660,0:02:52.990
Dann kriegen wir einen Float, dann noch einen
Float.

0:02:52.990,0:02:56.570
Der Ausgabewert ist vom Typ Picture wieder.

0:02:56.570,0:03:04.239
Das können wir so übernehmen, aber vorher
müssen wir das in die objektorientierte Sicht

0:03:04.239,0:03:05.239
übersetzen.

0:03:05.239,0:03:12.090
Das bedeutet hier konkret, da die Funktionen
in der Klasse Picture enthalten sind, brauchen

0:03:12.090,0:03:18.390
wir das erste Argument und den Ausgangswert
nicht, denn diese Funktionen sind einfach

0:03:18.390,0:03:23.349
nur Funktionen, die direkt auf Instanzen dieser
Klasse agieren.

0:03:23.349,0:03:27.640
Sozusagen in Place, diese verändern und nicht
am Ende ein neues Picture herausgeben.

0:03:27.640,0:03:33.099
Also wenn wir jetzt zum Beispiel eine Instanz
von Circle hätten und ich würde da auf Scale

0:03:33.099,0:03:38.819
aufrufen, dann würde das sich einfach nur
die internen Attribute von Circle angucken,

0:03:38.819,0:03:44.129
die verändern, entsprechend von Scale und
dann wäre es fertig.

0:03:44.129,0:03:46.849
Es würde keinen neuen Circle zurückgeben.

0:03:46.849,0:03:50.550
Und das ist hier im Endeffekt einfach nur
der Effekt von dieser objektorientierten Sicht

0:03:50.550,0:03:54.239
und dass diese Funktion direkt in der Klasse
Picture drin sind.

0:03:54.239,0:03:57.439
Das heißt, wir können uns diese Typ-Signaturen
hier anschauen.

0:03:57.439,0:04:06.629
Ich verschiebe das mal ein bisschen, damit
das auch sichtbar bleibt.

0:04:06.629,0:04:09.810
Das dann nach und nach übersetzen.

0:04:09.810,0:04:12.879
Das heißt, für Scale haben wir das erste
Diagramm in Picture.

0:04:12.879,0:04:16.109
Das ist die Klasse selber, die brauchen wir
nicht mit anzugeben als Argument.

0:04:16.109,0:04:20.060
Und dann haben wir zwei Floats und den Ausgabewert
Picture.

0:04:20.060,0:04:23.840
Das brauchen wir auch wieder nicht anzugeben,
weil wie ich schon erwähnte, da wird einfach

0:04:23.840,0:04:25.610
nur die Klasse selber verändert.

0:04:25.610,0:04:34.310
Das heißt für Scale konkret sind die Argumente
einfach nur, wir haben ein x-Argument, was

0:04:34.310,0:04:37.160
das Scaling auf der x-Achse angibt und das
ist vom Typ Float.

0:04:37.160,0:04:42.470
Und ein y-Argument, was das Scaling auf der
y-Achse angibt und das ist auch vom Typ Float

0:04:42.470,0:04:45.199
und damit ist Scale vervollständigt.

0:04:45.199,0:04:47.420
Für Color machen wir dasselbe.

0:04:47.420,0:04:53.580
Color bekommt einfach nur einen Color-Wert
und sonst gar nichts, weil hier ist auch wieder

0:04:53.580,0:04:58.090
das erste Argument die Klasse selbst und der
Ausgabewert die Klasse selbst.

0:04:58.090,0:05:08.919
Bei Rotate sieht das genauso aus, nur mit
einem Float für den Grad der Rotation.

0:05:08.919,0:05:11.090
Für Move haben wir wieder zwei Floats.

0:05:11.090,0:05:16.190
Da bewegen wir uns wieder auf der x- und y-Achse.

0:05:16.190,0:05:22.090
Und am Ende noch für Extent, Extent ist ein
bisschen anders.

0:05:22.090,0:05:24.599
Ich scrolle mal herunter zu Extent.

0:05:24.599,0:05:29.800
Genau, hier unten ist Extent.

0:05:29.800,0:05:33.960
Extent hat einfach nur das erste Element,
was vom Typ Picture ist und gibt einen Float

0:05:33.960,0:05:34.960
zurück.

0:05:34.960,0:05:42.039
Das bedeutet, das Argument fällt hier komplett
weg, denn das ist die Klasse selber, in der

0:05:42.039,0:05:43.039
die Funktion drin ist.

0:05:43.039,0:05:47.420
Das heißt, hier geben wir nur eine leere
Klammer an, für keine Argumente nötig und

0:05:47.420,0:05:52.030
Ausgabewert ist was vom Typ Float, weil hier
kommt jetzt wirklich was zurück, denn das

0:05:52.030,0:05:58.379
ist nicht die Klasse selbst, die manipuliert
wird, sondern hier wird wirklich ein Float

0:05:58.379,0:05:59.379
zurückgegeben.

0:05:59.379,0:06:05.760
Und damit hätten wir die erste Aufgabe erledigt.
