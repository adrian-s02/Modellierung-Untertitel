0:00:00.480,0:00:05.640
In this task, we are given five classes.
Computer, Server, Client, Laptop, and Tablet,

0:00:05.640,0:00:11.160
which I've already partially modeled out here.
And for these, we need to figure out a sensible

0:00:11.160,0:00:18.480
hierarchy by using suitable generalization groups.
So, looking at these five classes, we need to

0:00:18.480,0:00:24.180
first think about which class would make the most
sense being at the top of the hierarchy. That's

0:00:24.840,0:00:31.140
going to be Computer because every Client, Server,
Laptop, and Tablet is some kind of Computer. So,

0:00:31.140,0:00:36.360
putting the Computer at the top of the hierarchy,
where every other class is going to inherit from

0:00:36.360,0:00:41.760
it or indirectly inherit from it in some
way, makes the most sense in this case.

0:00:43.740,0:00:49.980
Now looking at the other classes, we have Client
and server, which are pretty distinct use cases

0:00:49.980,0:00:55.740
for a Computer. So, we can use that immediately
and just make a generalization group that we call

0:00:55.740,0:01:01.680
use cases. And if we get our generalization
arrow from down here and draw an arrow.

0:01:02.400,0:01:07.080
You can model it out properly as
well. You can get rid of these labels.

0:01:09.180,0:01:15.840
If you want to be very fancy, you can just
spend a lot of time aligning these lines here.

0:01:20.940,0:01:25.740
Then you can also make them into sharp
corners if you prefer that. And now,

0:01:25.740,0:01:32.640
we have our first generalization group
modeled here. We call it use-cases. So,

0:01:32.640,0:01:38.520
we can put a label on it that says use-cases,
making this our use-cases generalization group.

0:01:40.800,0:01:45.900
Next up, we have a laptop and tablet remaining.
We need to think about whether they can be part

0:01:45.900,0:01:51.720
of this generalization group as well. Well, not
really because Laptop and Tablet aren't use-cases

0:01:51.720,0:01:56.580
of a computer. They are kinds of computers.
So, it would make more sense to create a new

0:01:56.580,0:02:03.360
generalization group that we call use-cases,
which generalizes from Computer. Alternatively,

0:02:03.360,0:02:10.320
at this point, you could also argue that laptops
and tablets specifically are not normally used

0:02:10.320,0:02:17.100
as servers but only as clients. So, you could
put them as generalizations of clients. So,

0:02:17.100,0:02:24.180
this would be a device-type generalization of the
Client and, in turn, that inherits from Computer

0:02:24.180,0:02:29.760
as well. So, Laptop and Tablet are still kinds of
computers, but they are primary kinds of clients.

0:02:32.160,0:02:40.800
Of course, you can model them as direct
types of computers because, technically,

0:02:40.800,0:02:48.180
Laptop and Tablet could also be servers. So, it
would make sense to have it directly inherit

0:02:48.180,0:02:56.340
from Computer and not directly related to
Client and server in any way. If we do that,

0:02:57.720,0:03:06.780
we have our second generalization
group. You can get these arrows aligned.

0:03:09.660,0:03:16.740
This is not going to be perfect. But it
is what it is. So, this is our second

0:03:16.740,0:03:24.600
generalization group. A moment ago, we called it
device-types. So, let's just put that label on it,

0:03:26.340,0:03:30.000
device-types. So, this is our
device-types generalization group.

0:03:30.720,0:03:35.580
And with that, we have our hierarchy
complete. And now, we need to

0:03:36.660,0:03:41.160
determine for every generalization we use.
So, for use-cases and device-types here,

0:03:42.900,0:03:47.820
if they are complete or incomplete, and
whether they are disjoint or overlapping.

0:03:49.020,0:03:54.960
To determine if a generalization group is
complete, you need to think about if there

0:03:54.960,0:03:59.400
are any other possible classes that could
be in the generalization group but that

0:03:59.400,0:04:07.620
are not included in the model right now. So, for
use-cases here, for Client and server, normally,

0:04:07.620,0:04:14.640
a computer is either a client to something or a
server for something. So, that would make it a

0:04:14.640,0:04:22.440
complete generalization group. Now, you could also
argue in this case that you just use your Computer

0:04:22.440,0:04:27.300
for gaming, for example. You are not a client for
anything. You are not a server for anything. You

0:04:27.300,0:04:32.280
just play offline games, for example. Then your
Computer is neither a client nor a server. So,

0:04:32.280,0:04:38.880
this would be an incomplete generalization group.
So, this is where it's important to explain your

0:04:38.880,0:04:44.520
choices for each case. We're just going to say,
even if you're playing games, you're still a

0:04:44.520,0:04:49.860
client for something. Because how did you get the
game? These days you normally downloaded it.

0:04:49.860,0:04:55.800
So, at some point, your Computer was
a client. So, let's say, in this case, this is a

0:04:55.800,0:04:59.880
complete generalization group because your Computer
is going to be either a client or a server.

0:05:03.720,0:05:10.980
I'm going to leave this incomplete for a moment.
And ask the same question for the device-types

0:05:10.980,0:05:15.120
generalization group. In this case, it's pretty
clear that this is going to be an incomplete

0:05:15.120,0:05:20.280
generalization group. Because obviously, there are
other devices, other kinds of computers than just

0:05:20.280,0:05:25.500
laptops and tablets. There are rack-mounted
computers. There are desktop computers and

0:05:26.400,0:05:31.020
Raspberry Pi's, and whatever. Technically your
cell phone is a computer. So, this is definitely

0:05:31.020,0:05:39.360
an incomplete generalization group. To note
here, in terms of syntax, you use these curly

0:05:39.360,0:05:47.880
braces here to put these labels with complete
or disjoint on them. And now we need to ask

0:05:49.380,0:05:59.220
whether they are disjoint or overlapping. To
determine if they are disjoint or overlapping,

0:05:59.220,0:06:05.100
we look at the classes currently modeled in the
generalization group. And think if there could

0:06:05.100,0:06:11.100
be subclasses of these that inherit from both
of them, for example. So, in the case of device

0:06:11.100,0:06:20.700
types, you can have devices like hybrid laptops
or hybrid tablets. Where if you fold them up,

0:06:20.700,0:06:26.940
you have a full-size keyboard in them, and it's a
laptop. And if you fold it down, you just have the

0:06:26.940,0:06:33.240
screen as a touch screen. And then it's a tablet,
technically. So, this is definitely an overlapping

0:06:35.160,0:06:42.960
generalization group. Because you have these sort
of hybrid devices. And for Client and server,

0:06:46.440,0:06:52.140
it comes down to how you argue your case
here once again because technically,

0:06:52.140,0:06:58.800
your Computer can run a server software and be a
client to something else at the same time, making

0:06:58.800,0:07:09.000
your Computer technically both. So, that would
be a case where it's overlapping. Or we could go

0:07:09.000,0:07:12.840
with a narrative we've used before. Your computer
is either a server or a client. Therefore,

0:07:16.140,0:07:22.020
this would be a disjoint generalization
group. So, let's go with that for the moment.

0:07:23.160,0:07:30.660
And say this is a complete generalization group,
and it's disjoint. Because computers can be either

0:07:30.660,0:07:36.180
clients or servers. They can never be both. So,
this is both a complete generalization group

0:07:36.180,0:07:41.880
and disjoint at the same time. And for our
device-types generalization group, we decided

0:07:41.880,0:07:49.260
on incomplete because there are other kinds of
devices. And it's overlapping because it has

0:07:49.260,0:07:58.080
these hybrid devices. Now for the second sub-task,
we are supposed to give a possible attribute for

0:07:58.080,0:08:04.200
each of three of the classes. So, basically, three
attributes distributed throughout our diagram

0:08:04.200,0:08:14.400
here. And they need to capture the property of
the object exactly from that class. That means, if

0:08:14.400,0:08:20.940
we think of any attribute, we need to be careful
that the attribute actually belongs only in that class

0:08:22.500,0:08:29.760
and in any classes that inherit from that
class. I will give an example. So, for example,

0:08:29.760,0:08:36.900
we decide that we want an attribute for the
number of CPU cores. Let's just call it cores.

0:08:36.900,0:08:43.920
And we give it a type of Int because you can't
have half a core. It's always whole cores. So,

0:08:45.000,0:08:50.520
this attribute here in Laptop doesn't really
make sense. Because your tablet is going to

0:08:50.520,0:08:55.740
have some kind of CPU with a number of cores.
Your Computer is going to have a CPU with some

0:08:55.740,0:08:59.700
number of cores. Your Client and server as
well. So, just putting this attribute here

0:08:59.700,0:09:07.200
in Laptop doesn't really make sense. So, if we
add this to this place over here, that particular

0:09:07.200,0:09:13.380
attribute makes the most sense being in Computer
because all the other classes inherit from it. So,

0:09:13.380,0:09:17.460
we put in Computer. We have one of
our attributes correctly placed already.

0:09:17.460,0:09:25.020
So, this is our number of cores. Clients and
servers will have a CPU of some sort. And they'll

0:09:25.020,0:09:31.380
have a number of cores. So, that makes sense to
be in these classes. And it makes sense to be in

0:09:31.380,0:09:36.840
these classes, as well, for the same reason. So,
being in the superclass is the right place for it.

0:09:38.400,0:09:43.800
Now we need to come up with two more attributes
that we put in any of the other classes.

0:09:45.960,0:09:51.960
If we say, for example, laptops have a screen
size, that doesn't really work either. Because

0:09:51.960,0:09:57.060
a client will have a screen normally. Server,
not necessarily. But a client will definitely

0:09:57.060,0:10:02.940
have a screen most of the time. Tablet will have
a screen. So, putting a screen attribute in Laptop

0:10:02.940,0:10:08.160
doesn't really make sense. What else can we put
for a Laptop that wouldn't work for any of these

0:10:08.160,0:10:18.120
other ones? For example, you could say the number
of keys on the keyboard. Once again,

0:10:20.820,0:10:26.640
you only have whole keys. So, we type it as
Int, an integer as well. And that attribute

0:10:26.640,0:10:34.020
only really makes sense in Laptop here because
a tablet doesn't have a keyboard. Technically a

0:10:34.020,0:10:37.080
virtual one. But you wouldn't count the
number of keys on a virtual keyboard.

0:10:38.160,0:10:44.820
A client doesn't necessarily have a keyboard.
Because it could be a tablet, for example. So,

0:10:45.360,0:10:51.420
wouldn't have a keyboard. And a server, most of
the time, has no peripherals at all. So, that

0:10:51.960,0:10:56.640
definitely won't have a keyboard, either. So, the
number of keys makes sense being in Laptop here.

0:10:58.800,0:11:04.320
For the third attribute, we could come up
with something for a tablet, for example,

0:11:04.320,0:11:10.920
and say touchscreen sensitivity. And
that would be a float value. Determining

0:11:12.000,0:11:19.380
how accurate your pointer is going to be
or how many degrees is going to be off

0:11:19.380,0:11:28.560
from where you actually touch. So, let's say
sensitivity or something or touch sensitivity.

0:11:32.520,0:11:39.960
And we put that as a float value because we want
to have that to be really exact. So, this would be

0:11:39.960,0:11:46.680
three attributes here: cores in Computer, number
of keys in Laptop, Tablet has touch sensitivity.

0:11:48.960,0:11:54.420
And for this one, also going over it for a
moment. The Laptop normally wouldn't have touch

0:11:54.420,0:12:00.540
sensitivity. The Computer doesn't necessarily
have touch functionality at all. So, it doesn't

0:12:00.540,0:12:06.840
make sense being here. And for the Client, it's
the same case. A client could have a touchscreen,

0:12:06.840,0:12:11.700
but it doesn't need to have one. So, doesn't
make sense to have it in here as well.

0:12:13.080,0:12:16.860
So, this would definitely be a candidate
for a unique attribute for tablets.

0:12:17.880,0:12:21.360
You could also come up with
a couple more here because

0:12:22.980,0:12:28.800
you might have come up with something for the
Client. Maybe the IP address, but IP doesn't

0:12:28.800,0:12:33.120
really make sense being in Client because every
Computer is going to have an IP address if it's

0:12:33.120,0:12:39.180
on a network of some sort. So, maybe a client
could have certain kinds of client software.

0:12:42.840,0:12:47.520
Let's put it as a string, as it would be the
name of something. And the server could then

0:12:47.520,0:12:55.920
have services that it runs. So, this would also
be a string. And then, we have attributes for

0:12:55.920,0:13:01.500
each of our classes. But as it says, you
only need to figure out three of these.
