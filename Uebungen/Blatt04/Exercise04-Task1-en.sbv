0:00:01.800,0:00:12.050
Welcome to this video about the exercise task
about the vector graphics example. In this

0:00:12.050,0:00:23.060
task, first of all, we have a class
diagram, which consists of five classes. And

0:00:23.060,0:00:31.480
we shall say which method or which classes
can invoke the methods scale, color, rotate,

0:00:31.480,0:00:40.940
move, and extent, which are the methods of
Picture here. So, when we look at this class

0:00:40.940,0:00:50.579
diagram, we see those methods only within
the Picture class. So, that is why we could

0:00:50.579,0:01:04.570
simply say, of course, all objects of class
Picture could call those methods.

0:01:04.570,0:01:10.891
But, as
the Picture class is an abstract class, there

0:01:10.891,0:01:21.509
are no such objects. That's why we could consider
the other classes. Circle, Rectangle, and

0:01:21.509,0:01:30.350
Path are all also pictures because they inherit
from the Picture class. And that is why they

0:01:30.350,0:01:38.100
also inherit the methods. That is why objects
of types circle, rectangle, and Path can also

0:01:38.100,0:01:49.469
invoke those methods. And so, circle, rectangle,
and Path can all invoke those mentioned methods.

0:01:49.469,0:02:01.620
But for Point, this is not true. So, because
Point is in relation with Path by an aggregation,

0:02:01.620,0:02:10.670
Points cannot invoke these methods. For instance,
if you have gotten an object of type Point,

0:02:10.670,0:02:22.420
it's not possible to call scale on it. The
second part of this task is about completing

0:02:22.420,0:02:30.410
the class diagram, which is mentioned above.
Especially, we've got underscores here within

0:02:30.410,0:02:39.239
the Picture class. And therefore, we require
the slides of the lecture, more specifically

0:02:39.239,0:02:50.040
the vector graphics example when it was introduced.
Because there we have the operations or the

0:02:50.040,0:02:57.740
functions defined which are the basis for
the methods which we've got in this class

0:02:57.740,0:03:06.459
here. And this function always takes a Picture
and then more arguments and returns a picture.

0:03:06.459,0:03:13.540
In our case, we've got the object-oriented view
 of this now. And we've got a Picture

0:03:13.540,0:03:24.360
already. On the specific Picture, we call
such methods. So, we will call scale on a

0:03:24.360,0:03:33.070
specific picture. And when we do that, we
require further arguments. But we change the

0:03:33.070,0:03:39.700
Picture at hand. That is why we do not require
a Picture as an argument. And when we have got

0:03:39.700,0:03:51.129
scale, we shall use the UML syntax here. We
also require a name for the arguments. And

0:03:51.129,0:04:01.159
for scale, we, of course, would scale within
the x and y direction. So, we require an x

0:04:01.159,0:04:10.020
and a y value. This is the
type that we've got from here already, which

0:04:10.020,0:04:18.019
we require here as a type for our arguments.
So, this is a float. And the same goes for

0:04:18.019,0:04:29.340
our y argument, which is also a float. So,
this should all be within the box. I just

0:04:29.340,0:04:39.090
wrote it above here. But it would be better
to actually draw the diagram again. I just

0:04:39.090,0:04:47.490
want to simplify it and put it here for this
video within the box by writing it by hand

0:04:47.490,0:04:58.150
here. And we do not require a return type
here. And this is important because we apply

0:04:58.150,0:05:05.360
scale to the Picture at hand and change the
Picture. We do not get a copy of any Picture

0:05:05.360,0:05:11.199
or an additional picture. We change the original
Picture. And that's the difference to the

0:05:11.199,0:05:20.030
function here. Our method changes the object
at hand. And we can continue defining the

0:05:20.030,0:05:27.819
methods here by looking at the functions that
we had in the vector graphics example that

0:05:27.819,0:05:32.750
was introduced. And "color" changes the
color of the Picture and therefore requires a

0:05:32.750,0:05:45.430
color. Let's call it C. And then we've got
rotate, which takes a picture and a float

0:05:45.430,0:05:54.170
as we rotate the Picture itself. This would
be just float for an angle. So, let's call

0:05:54.170,0:06:04.680
it angle. And you we require a float. Once
again, we do not require a return type of

0:06:04.680,0:06:10.650
type Picture because we change the Picture.
Having the return type Picture here would

0:06:10.650,0:06:22.901
be wrong because we changed the Picture at
hand. Then we've got the move operation. When

0:06:22.901,0:06:31.349
you look at the function of move, it looks
exactly like scale. So, we can also take the

0:06:31.349,0:06:45.819
same definition for our method. So, the type
is the same, and we can also keep the same

0:06:45.819,0:06:53.910
names for our parameters. Because in this
case, we have also got an x and

0:06:53.910,0:07:05.370
a y-direction for moving. Now extent is an
operation that is not found here within the

0:07:05.370,0:07:14.410
definition of vector graphics as a function.
This is because it was mentioned later. So,

0:07:14.410,0:07:20.940
it was mentioned within the object orientation
already, but there we have the example again.

0:07:20.940,0:07:31.860
And there is extent defined as returning a
float value for Picture. So, we could think

0:07:31.860,0:07:37.550
about this like, we've got a picture already,
and when we call extent on it, we just want

0:07:37.550,0:07:45.020
to return the float value. So, this is different
from the other functions and also the other

0:07:45.020,0:07:51.090
methods. In this case, we do not have an argument.
So, that's why we have an opening and closing

0:07:51.090,0:07:57.740
bracket simply. And then the return type is
really important. Because this is a float

0:07:57.740,0:08:04.430
in this case. And this was already mentioned
within the lecture. So, we could have just

0:08:04.430,0:08:24.659
copied it from here because here, the correct
type is already defined. Now there is just

0:08:24.659,0:08:30.150
an extension to the task missing. While we
could think about the ampersand operator,

0:08:30.150,0:08:39.030
which was defined within the introduction
to the vector graphics example. Here it is.

0:08:39.030,0:08:48.339
So, it combines two pictures and results in
a picture. If we want to realize this within

0:08:48.339,0:08:59.830
the domain of object orientation within this
class diagram, we could extend our Picture

0:08:59.830,0:09:10.579
here and realize this as well. When we think
about it, we can realize it by adding a picture

0:09:10.579,0:09:21.810
to another picture. So, this way, we could
combine or change one Picture by adding another

0:09:21.810,0:09:31.050
Picture to it. That is why we could define
it like this we have an ampersand function

0:09:31.050,0:09:41.190
that takes one argument, which is the other
Picture. So, let's call it p. And this of

0:09:41.190,0:09:56.710
type Picture. And it will change the Picture
at hand by calling this method. We have then

0:09:56.710,0:10:05.630
another Picture here. So, in this way, we
could combine Pictures. Maybe some of you

0:10:05.630,0:10:14.060
thought about why we have an aggregation here
between Path and Point because the Path consists

0:10:14.060,0:10:22.190
of multiple Points. Why is it not a composition?
This depends on how we want to see the Path.

0:10:22.190,0:10:34.200
Because if it's like this, that every Point
of the Path exists only for the Path, then

0:10:34.200,0:10:42.579
we could say it is a composition. But in this
case, it's not possible for multiple Paths

0:10:42.579,0:10:50.850
to share the same Point. So, you would require
another Point with the same x and y value

0:10:50.850,0:10:58.709
for another Path if we have a composition
here. So, if we have an aggregation here,

0:10:58.709,0:11:05.910
then multiple Paths can share the same Point.
So, when you're thinking about composition

0:11:05.910,0:11:15.200
and aggregation, you can also think about
what you want to have in your specific problem.

0:11:15.200,0:11:23.500
Both ways are possible for Path. When we have
the composition, Points cannot be shared.

0:11:23.500,0:11:32.930
And every Path is on just that single Point.
When we have aggregation, then Points may

0:11:32.930,0:11:40.270
be shared between different paths. That's
it for this task.
