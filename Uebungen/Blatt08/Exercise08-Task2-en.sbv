0:00:02.000,0:00:06.720
This task is about an unbounded Petri net.

0:00:06.720,0:00:11.269
And this is the Petri net in question.

0:00:11.269,0:00:16.880
And there are several tasks for this Petri
net.

0:00:16.880,0:00:25.550
And first of all, we should create part of
the infinite reachability graph.

0:00:25.550,0:00:34.810
We cannot create the complete reachability
graph because of course it is infinite.

0:00:34.810,0:00:44.399
But the part that we shall create should contain
all states that are reachable within at most

0:00:44.399,0:00:47.180
three transitions.

0:00:47.180,0:00:58.450
We have to have all the connections between
all possible transitions between these states.

0:00:58.450,0:01:04.510
That's what hint also tells us.

0:01:04.510,0:01:08.360
Let's switch to another screen.

0:01:08.360,0:01:17.000
And here I will draw the reachability graph
now.

0:01:17.000,0:01:20.820
This is the Petri net in question still.

0:01:20.820,0:01:30.110
We start the reachability graph by using the
initial marking.

0:01:30.110,0:01:34.619
We use the usual sequence of places.

0:01:34.619,0:01:48.549
s1 is the first, so is the first place of
our tuple.

0:01:48.549,0:01:54.000
Second is s2, which has zero tokens.

0:01:54.000,0:01:59.509
And third is s3, which has also zero tokens.

0:01:59.509,0:02:04.841
The first one has one token at the beginning.

0:02:04.841,0:02:11.830
This is the starting point of our reachability
graph.

0:02:11.830,0:02:22.940
Now we continue by looking for further transitions
that can happen from there on.

0:02:22.940,0:02:34.130
And having in mind that we require all the
connections for firing three transitions.

0:02:34.130,0:02:40.830
But when we consider the first marking, well,
the only transition we can fire is t1 because

0:02:40.830,0:02:43.130
there's a token in s1.

0:02:43.130,0:02:50.360
But the others require tokens in s2 or s3
respectively.

0:02:50.360,0:03:05.880
We start by firing t1 and then we get to our
next state.

0:03:05.880,0:03:19.420
Let's say we go from here to the next state,
which is zero tokens in s1, because there's

0:03:19.420,0:03:28.420
no arrow from t1 going there, but one arrow
going from s1 to t1.

0:03:28.420,0:03:37.670
And s2 and s3 will each get one token.

0:03:37.670,0:03:44.190
So by firing t1

0:03:44.190,0:03:46.730
we have reached this state.

0:03:46.730,0:03:50.519
And now we have two options.

0:03:50.519,0:03:58.230
There's no token in s1 now, so we cannot fire
t1 when we reach this

0:03:58.230,0:03:59.230
marking.

0:03:59.230,0:04:06.900
But we can fire t2 as we have got a token in
s2 and we can t3 as we have got a token in

0:04:06.900,0:04:08.200
s3.

0:04:08.200,0:04:19.670
Basically, it's easy to see which transition
we can fire as in this case for this particular

0:04:19.670,0:04:21.350
graph.

0:04:21.350,0:04:26.790
Because when there is a token in the first
one, we can fire t1.

0:04:26.790,0:04:30.600
When there is a token in the second one, we
can fire t2.

0:04:30.600,0:04:37.270
And when there's a token in the third place,
we can fire t3.

0:04:37.270,0:04:40.860
We can fire t2.

0:04:40.860,0:04:46.160
Let's do this, t2.

0:04:46.160,0:05:03.110
And we will get one token in s1 and there
will be no token in s2 left, as one is required

0:05:03.110,0:05:05.750
for firing t2.

0:05:05.750,0:05:19.580
And we still have the token in s3, as t2 has
no connection to place s3.

0:05:19.580,0:05:34.880
And another option for this particular marking
here, this particular state would be firing

0:05:34.880,0:05:38.940
t3.

0:05:38.940,0:05:47.030
When we fire t3, we would reach the state.

0:05:47.030,0:06:02.699
Well, we would reach the state (0,1,2) because
we take one token out of s3, but place two

0:06:02.699,0:06:05.729
tokens back in.

0:06:05.729,0:06:12.330
This was reached by firing t3.

0:06:12.330,0:06:26.410
And we can reach this particular state also
by firing t1, which takes one token from s1

0:06:26.410,0:06:34.860
and adds a token to s2 and adds a token to
s3.

0:06:34.860,0:06:40.789
This was reached by firing t1.

0:06:40.789,0:06:55.039
In this particular case, we would already
be done with firing three transitions, but

0:06:55.039,0:07:01.010
we could go from the other states as well.

0:07:01.010,0:07:12.690
For instance, we were continuing from here
where we could skip like this.

0:07:12.690,0:07:19.440
We can check if there are other options for
this state, for instance, when we are in the

0:07:19.440,0:07:27.750
marking where there's one token in s1 and
one token in s3.

0:07:27.750,0:07:36.759
And we have already the connection where t1
is fired, but s3 can also be fired.

0:07:36.759,0:07:46.659
We would be in a state where there's one more
token in s3 as we take one token and add two

0:07:46.659,0:07:49.810
tokens to s3.

0:07:49.810,0:08:05.300
We reach the state (1,0,2) by firing t3.

0:08:05.300,0:08:19.259
And now we can

0:08:19.259,0:08:31.159
continue from this state here because this
is also reachable by two transitions, by firing

0:08:31.159,0:08:33.029
t1 and t3.

0:08:33.029,0:08:40.580
Thus, we can think about the transitions that
we can fire from here.

0:08:40.580,0:08:50.670
And there are two options; we can fire t2,
which takes one token from s2.

0:08:50.670,0:08:57.160
And adds a token to s1 which would lead us
to (1,0,2), which is the state we already

0:08:57.160,0:09:02.980
have, so we can fire t2 here.

0:09:02.980,0:09:13.150
Or we can fire t3, which takes one token from
s3 and adds two tokens to s3, which would

0:09:13.150,0:09:21.660
lead us to the state (0,1,3).

0:09:21.660,0:09:32.250
Actually, when we now look at this graph,
we can look for all the paths which contain

0:09:32.250,0:09:35.110
three transitions.

0:09:35.110,0:09:39.350
And we are already done with the task.

0:09:39.350,0:09:53.640
You could furthermore add all the edges

0:09:53.640,0:10:07.630
that go outside of these
states.

0:10:07.630,0:10:13.769
If you have done this, this would be fine
as well.

0:10:13.769,0:10:17.630
You could basically just add more edges.

0:10:17.630,0:10:24.560
When you think about these states that were
reached, then you can think about what transitions

0:10:24.560,0:10:26.810
could be fired from there.

0:10:26.810,0:10:33.660
And then these could be added as well, but
this is as I said, optional.

0:10:33.660,0:10:40.160
When we think, for instance for this, from
this state here, (1,0,2) we could fire t1

0:10:40.160,0:10:57.760
here and we could also fire t2 here.

0:10:57.760,0:11:06.020
Let me just draw this down here.

0:11:06.020,0:11:12.640
We could fire t1 from here and we could fire
t3.

0:11:12.640,0:11:16.100
And from the other state,

0:11:16.100,0:11:34.850
from this one here, we could fire t2 and we could
fire t3.

0:11:34.850,0:11:41.550
But as I said, this is optional.

0:11:41.550,0:11:51.930
Now we could
look at the other task.

0:11:51.930,0:12:00.620
Let me just move back to the task again.

0:12:00.620,0:12:07.990
And the second task is to explain with the
help of the graph why the net is unbounded

0:12:07.990,0:12:14.850
and to describe an infinite sequence of transitions
that leads to an arbitrary large number of

0:12:14.850,0:12:20.170
tokens in one of the places of the Petri net.

0:12:20.170,0:12:26.459
We can use this reachability graph now.

0:12:26.459,0:12:29.120
Or we shall use it as well.

0:12:29.120,0:12:41.959
And when we look at it, then we can identify
some places.

0:12:41.959,0:12:53.750
Let me just maybe mark this place here.

0:12:53.750,0:13:06.790
When we look at two states here, let's say
these two here, then we see that basically

0:13:06.790,0:13:14.260
we are in the same state when we are in this
state, as we were before, considering the

0:13:14.260,0:13:15.900
tokens available.

0:13:15.900,0:13:23.880
The only thing that changed is that we have
got one token more in place three than we

0:13:23.880,0:13:25.390
had before here.

0:13:25.390,0:13:32.220
But there are the same amount of tokens in
place one, which is one and the same amount

0:13:32.220,0:13:35.389
of tokens in place two, which is zero.

0:13:35.389,0:13:47.630
But we could fire the same transitions t1
and t2 again.

0:13:47.630,0:14:04.130
When doing this, we could basically fire the
sequence t1, t2 repeatedly.

0:14:04.130,0:14:23.930
And we would get a sequence which always adds
another token to the place s3.

0:14:23.930,0:14:35.630
For instance, if we consider this place here,
this can also be reached by firing t1 and

0:14:35.630,0:14:37.959
t2 again, and this would continue.

0:14:37.959,0:14:46.480
We could then fire t1 here again and so on.

0:14:46.480,0:14:53.490
We could fire t1 and t2 repetitively, and
would always add another token there.

0:14:53.490,0:15:00.370
And these considerations could be made for
other places as well.

0:15:00.370,0:15:11.040
We could consider doing the same with maybe
some other states.

0:15:11.040,0:15:22.000
Well for these two here, maybe we could, for
instance, consider this state here and this

0:15:22.000,0:15:24.720
state here.

0:15:24.720,0:15:27.790
We could have the sequence t1 and t2 here.

0:15:27.790,0:15:34.610
Or we could repetitively have t3 fired here.

0:15:34.610,0:15:45.959
Because when we fire t3 again, so firing t3
repeatedly, then we get into this state here.

0:15:45.959,0:15:51.010
We can repeat this ever again.

0:15:51.010,0:16:01.269
And then we can fire t3 once more, and we
always add another token into place s3.

0:16:01.269,0:16:09.029
There are multiple ways of how you can get
such a sequence and you can choose either

0:16:09.029,0:16:11.450
one of those.

0:16:11.450,0:16:22.400
For instance, firing the sequence of t1 and
t2 repetitively or firing t3, repetitively.

0:16:22.400,0:16:32.000
And when you solve the task you have, of course,
to consider those firing sequences using your

0:16:32.000,0:16:33.060
reachability graph.

0:16:33.060,0:16:40.980
That is by talking about the actual states
in the reachability graph, and then the firing

0:16:40.980,0:16:51.380
sequence, which leads to the sequence, which
creates this infinite graph.

0:16:51.380,0:16:57.180
Let's go back to the task once more.

0:16:57.180,0:17:01.040
And we have done B now and now C is left.

0:17:01.040,0:17:09.230
Now we shall modify the Petri net slightly
such that it is no longer unbounded, but it

0:17:09.230,0:17:14.600
shall be still deadlock free.

0:17:14.600,0:17:19.360
And our change should be as small as possible.

0:17:19.360,0:17:26.839
This is the Petri net in question here.

0:17:26.839,0:17:43.309
And how can we change this Petri net in order
to make it

0:17:43.309,0:17:50.799
bounded but deadlock free?

0:17:50.799,0:18:06.230
We can make it bounded, first of all, by changing
this amount here of tokens which are added

0:18:06.230,0:18:08.910
into place s3.

0:18:08.910,0:18:19.080
When we remove this number and thus change
that there is only one token added to s3,

0:18:19.080,0:18:29.590
then we would not be able to generate more
tokens.

0:18:29.590,0:18:44.970
Basically, the amount of tokens would not
increase by firing t3 in place s3, but still

0:18:44.970,0:18:50.110
it would increase by firing the sequence of
t1 and t2.

0:18:50.110,0:18:58.430
Because when we fire t1 and then t2 and then
t1 again, we always, when we fire t1, we add

0:18:58.430,0:19:00.770
a token to s3.

0:19:00.770,0:19:09.289
And in order to repair this, we can add a
connection between s3 and t2.

0:19:09.289,0:19:27.020
If s3 will be a requirement for firing t2,
then this will prevent

0:19:27.020,0:19:30.409
generating more tokens in s3.

0:19:30.409,0:19:37.400
Because now when we fire t1 and afterwards
fire t2, there will still be one token in

0:19:37.400,0:19:40.100
s1.

0:19:40.100,0:19:52.640
Now we've made the reachability graph bounded
and also deadlock free.

0:19:52.640,0:20:04.780
Because now there will not be a deadlock where
we can do nothing any more.

0:20:04.780,0:20:16.580
Because we can always fire t3

0:20:16.580,0:20:25.110
or t2 when there are
tokens in s2 or s3.

0:20:25.110,0:20:34.600
And in fact, there will be tokens in s2 and
s3 always at the same time.

0:20:34.600,0:20:42.280
If there's a token in s2, it will also be
in s3 because when we fire t1 one token is

0:20:42.280,0:20:46.049
added to s2 and to s3.

0:20:46.049,0:20:51.610
And when we fire t3, we change nothing at
the amount of tokens in s3.

0:20:51.610,0:20:57.200
And when we fire t2, both tokens are removed
from s2 and s3.

0:20:57.200,0:21:01.840
And so, we are done with this task as well.
